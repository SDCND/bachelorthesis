<html>
<head>
<META http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<title>Galileo Computing :: Python – 13.5 Iteratoren</title>
<meta name="title" content="Galileo Computing :: Python - 13.5 Iteratoren">
<meta name="author" content="Peter Kaiser, Johannes Ernesti">
<meta name="publisher" content="Galileo Press 2008">
<meta name="copyright" content="Galileo Press 2008">
<meta name="Description" content="Python - Das umfassende Handbuch – 13.5 Iteratoren">
<meta name="audience" content="Alle">
<meta name="robots" content="INDEX,FOLLOW">
<meta http-equiv="content-language" content="de">
<link rel="stylesheet" type="text/css" href="common/galileo_open.css">
<link rel="prev" href="python_kapitel_13_004.htm">
<link rel="next" href="python_kapitel_13_006.htm"><script type="text/javascript"><!--
    function OpenWin(url,name,height,width)
    {
      var InfoWin = window.open(url,name,"directories=0,height="+height+",width=" + width + ",hotkeys=0,location=0,menubar=0,resizable=1,screenX=150,screenY=10,left=150,top=10,scrollbars=1,status=1,titlebar=0,toolbar=0");
      InfoWin.focus();
    }
    //--></script><link href="common/prettify.css" type="text/css" rel="stylesheet"><script type="text/javascript" src="common/prettify.js"></script></head>
<body vlink="#000099" link="#000099" alink="#000099" onload="prettyPrint()">
<table width="100%" border="0" cellpadding="0" cellspacing="0" bgcolor="#000066">
<tr>
<td height="74" valign="bottom" colspan="2"><a href="http://www.galileocomputing.de/katalog/openbook?GPP=oppy"><img src="common/galileocomputing_openbook.gif" width="200" height="56" border="0" alt="Galileo Computing < openbook >" title="Galileo Computing < openbook >"></a></td>
<td width="80" height="74"><a href="http://www.galileocomputing.de/?GPP=oppy"><img src="common/galileocomputing.gif" border="0" alt="Galileo Computing - Professionelle Bücher. Auch für Einsteiger." title="Galileo Computing - Professionelle Bücher. Auch für Einsteiger."></a></td>
</tr>
</table>
<div align="right"><a href="http://www.galileocomputing.de/?GPP=oppy" class="navnav">Professionelle Bücher. Auch für Einsteiger.</a></div><br><table class="tbl" border="0" cellpadding="0" cellspacing="0" width="100%">
<tr>
<td width="190" valign="top">
<table class="tbl1" border="0" cellpadding="3" cellspacing="0" width="190" align="left">
<tr>
<td class="tbl2"><a class="nav" href="index.htm#_top">Inhaltsverzeichnis</a></td>
</tr>
<tr>
<td><a class="navnav" href="python_kapitel_01_001.htm#mj67a594b305e4109145454ddc0d55999c">1 Einleitung</a></td>
</tr>
<tr>
<td><a class="navnav" href="python_kapitel_02_001.htm#mjddfab2e530e1ced3efb614b75430300d">2 Überblick über Python</a></td>
</tr>
<tr>
<td><a class="navnav" href="python_kapitel_03_001.htm#mj936060d19c41bd12bf740798a2280ed0">3 Die Arbeit mit Python</a></td>
</tr>
<tr>
<td><a class="navnav" href="python_kapitel_04_001.htm#mj4c3be3990be6964addc0f6d0dc22f9d8">4 Der interaktive Modus</a></td>
</tr>
<tr>
<td><a class="navnav" href="python_kapitel_05_001.htm#mjddf21128ad2999d9e2a37e5112a0af06">5 Grundlegendes zu Python-Programmen</a></td>
</tr>
<tr>
<td><a class="navnav" href="python_kapitel_06_001.htm#mj3c43dbe4a08e5559d01e50286484c126">6 Kontrollstrukturen</a></td>
</tr>
<tr>
<td><a class="navnav" href="python_kapitel_07_001.htm#mj4ebbbff6e4edb4fe615e242a01d77f27">7 Das Laufzeitmodell</a></td>
</tr>
<tr>
<td><a class="navnav" href="python_kapitel_08_001.htm#mj5434917b0e68fc12d539b3d9f605c69d">8 Basisdatentypen</a></td>
</tr>
<tr>
<td><a class="navnav" href="python_kapitel_09_001.htm#mj7db54ea5091e23f706b1786ead1a782f">9 Benutzerinteraktion und Dateizugriff</a></td>
</tr>
<tr>
<td><a class="navnav" href="python_kapitel_10_001.htm#mjf74b0a739c10c2f7132913c19e91246f">10 Funktionen</a></td>
</tr>
<tr>
<td><a class="navnav" href="python_kapitel_11_001.htm#mj3e41238df9387de38f2c931eba1bfeb9">11 Modularisierung</a></td>
</tr>
<tr>
<td><a class="navnav" href="python_kapitel_12_001.htm#mjcd1790d94142bd3f3a263231dbf0e3f7">12 Objektorientierung</a></td>
</tr>
<tr>
<td><a class="navh" href="##mj4ec2d9702da110e2dacd99679d3c813d">13 Weitere Spracheigenschaften</a></td>
</tr>
<tr>
<td><a class="navnav" href="python_kapitel_14_001.htm#mj22b60f53fd2027b93c076a524242b35b">14 Mathematik</a></td>
</tr>
<tr>
<td><a class="navnav" href="python_kapitel_15_001.htm#mjca183f321ad76918bcff867c4ffe4fab">15 Strings</a></td>
</tr>
<tr>
<td><a class="navnav" href="python_kapitel_16_001.htm#mjbc5f03a28f08a0ff6fff3f6eafb13845">16 Datum und Zeit</a></td>
</tr>
<tr>
<td><a class="navnav" href="python_kapitel_17_001.htm#mj1ca63a01c44856e9ecf8daef9834ac38">17 Schnittstelle zum Betriebssystem</a></td>
</tr>
<tr>
<td><a class="navnav" href="python_kapitel_18_001.htm#mj9e2e147ec7c1c409ab62884ed2afaa21">18 Parallele Programmierung</a></td>
</tr>
<tr>
<td><a class="navnav" href="python_kapitel_19_001.htm#mj5f8739be6f0fbee26d20565b4eeb8166">19 Datenspeicherung</a></td>
</tr>
<tr>
<td><a class="navnav" href="python_kapitel_20_001.htm#mj6a610f312e2abfe628f8f50a8629087d">20 Netzwerkkommunikation</a></td>
</tr>
<tr>
<td><a class="navnav" href="python_kapitel_21_001.htm#mjd1f17b81729d3362ce1283c29a6064f5">21 Debugging</a></td>
</tr>
<tr>
<td><a class="navnav" href="python_kapitel_22_001.htm#mj7398fb17f09867fc123360d9b3066e94">22 Distribution von Python-Projekten</a></td>
</tr>
<tr>
<td><a class="navnav" href="python_kapitel_23_001.htm#mj2213eb2f7fc258333f88f873ac4a8051">23 Optimierung</a></td>
</tr>
<tr>
<td><a class="navnav" href="python_kapitel_24_001.htm#mj0bdf563dc1f3ef7638dab0dfb6bdd753">24 Grafische Benutzeroberflächen</a></td>
</tr>
<tr>
<td><a class="navnav" href="python_kapitel_25_001.htm#mjbea967a6f2023581a39d524b6d91a141">25 Python als serverseitige Programmiersprache im WWW mit Django</a></td>
</tr>
<tr>
<td><a class="navnav" href="python_kapitel_26_001.htm#mj43e9e45f2e92366984e5b113f832514f">26 Anbindung an andere Programmiersprachen</a></td>
</tr>
<tr>
<td><a class="navnav" href="python_kapitel_27_001.htm#mj30bed08497d2de4e7e72cbdeefa9fc78">27 Insiderwissen</a></td>
</tr>
<tr>
<td><a class="navnav" href="python_kapitel_28_001.htm#mj8586665aff70d4410c8ba7725befb825">28 Zukunft von Python</a></td>
</tr>
<tr>
<td><a class="navnav" href="python_kapitel_A_001.htm#mjd7cca37a6c80d7ec0d715951f4148f05">A Anhang</a></td>
</tr>
<tr>
<td><a class="navnav" href="stichwort.htm#_top">Stichwort</a></td>
</tr>
<tr>
<td><br><a href="http://download.galileo-press.de/openbook/python/galileocomputing_python.zip" class="navnav"><strong>Download:</strong><br>- ZIP, ca. 4,8 MB</a></td>
</tr>
<tr>
<td><a href="http://www.galileocomputing.de/1626?GPP=oppy" class="navnav">Buch bestellen</a></td>
</tr>
<tr>
<td><a class="navnav" href="#kommentar">Ihre Meinung?</a><br><br></td>
</tr>
</table>
</td>
<td width="10"><img src="common/spacer10.gif" width="10" height="10" alt="Spacer"></td>
<td width="85%" valign="top" align="center"><div align="center">
<table width="98%" border="0" cellspacing="0" cellpadding="0" bgcolor="#FFFFFF">
<tr>
<td width="100%" class="start" colspan="1" height="22" align="center"><table width="100%" border="0" cellspacing="0" cellpadding="0">
<tr>
<td width="25%"><a href="python_kapitel_13_004.htm" class="navnav"> &lt;&lt;   zurück</a></td>
<td width="49%"><div align="center"><a href="http://www.galileocomputing.de/?GPP=oppy" class="navnav">Galileo Computing /</a><a href="http://www.galileocomputing.de/katalog/openbook/?GPP=oppy" class="navnav"> &lt;openbook&gt; /</a><a href="index.htm" class="navnav"> Python</a></div></td>
<td align="right" width="25%"><div align="right"><a href="python_kapitel_13_006.htm" class="navnav">vor   &gt;&gt; </a></div></td>
</tr>
</table></td>
</tr>
<tr>
<td width="100%" valign="top"><table width="100%" border="0" cellpadding="10" cellspacing="0" class="box">
<tr>
<td colspan="2"><a href="http://www.galileocomputing.de/1626?GPP=oppy" class="buchtitel">Python</a><span class="autor"> von Peter Kaiser, Johannes Ernesti</span><br><span class="untertitel">Das umfassende Handbuch - Aktuell zu Python 2.5</span></td>
</tr>
<tr>
<td valign="top" width="211"><dl>
<dt><a href="http://www.galileocomputing.de/1626?GPP=oppy" class="navnav"><img src="common/9783836211109.gif" border="0" alt="Buch: Python" title="Buch: Python"></a></dt>
<dd><br><a href="http://www.galileocomputing.de/1626?GPP=oppy"><span class="autor"><strong>Python</strong><br>gebunden, mit CD<br>819 S., 39,90 Euro<br>Galileo Computing<br>ISBN 978-3-8362-1110-9</span></a></dd>
</dl></td>
<td width="80%"><table border="0">
<tr>
<td valign="baseline"><img src="common/pfeil_u.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="3" class="kap"><strong><a href="python_kapitel_13_001.htm#mj4ec2d9702da110e2dacd99679d3c813d" class="navnav">13 Weitere Spracheigenschaften</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="python_kapitel_13_001.htm#mj9c47e95ef0de2b51b8795360350d0a36" class="navnav">13.1 Exception Handling</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="python_kapitel_13_001.htm#mj3f943e2f2b146758936395ab700b1a95" class="navnav">13.1.1 Eingebaute Exceptions</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="python_kapitel_13_001.htm#mj9a39e9bacbeb90df594e637f72c3e6ab" class="navnav">13.1.2 Werfen einer Exception</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="python_kapitel_13_001.htm#mj2bf223cf5076971dac89ce850f422655" class="navnav">13.1.3 Abfangen einer Exception</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="python_kapitel_13_001.htm#mj895579472648ac2c14f13006f018c0ab" class="navnav">13.1.4 Eigene Exceptions</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="python_kapitel_13_001.htm#mjb2e82a98750dc84939d28981bc7dd025" class="navnav">13.1.5 Erneutes Werfen einer Exception</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="python_kapitel_13_002.htm#mjde4dfaadeda6f0449d0fe28c495d80eb" class="navnav">13.2 List Comprehensions</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="python_kapitel_13_003.htm#mj4f43dabfe129e9471aaf49d6abe8d0cc" class="navnav">13.3 Docstrings</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="python_kapitel_13_004.htm#mjac0bfc00292240b2c8d8cf0edee8f986" class="navnav">13.4 Generatoren</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="#mj9d03049cdb368743dcb32d8c937ad98d" class="navh">13.5 Iteratoren</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="python_kapitel_13_006.htm#mjaa7fba753afb73402cf1ee2f39350c3f" class="navnav">13.6 Interpreter im Interpreter</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="python_kapitel_13_007.htm#mjdd13a8178c498ff3a23ce9a22856d14d" class="navnav">13.7 Geplante Sprachelemente</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="python_kapitel_13_008.htm#mj7d0d3991b4235110254b1112cbcd4a2b" class="navnav">13.8 Die with-Anweisung</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="python_kapitel_13_009.htm#mj9d7c6bf482ebc41e3bd636b21d9fede6" class="navnav">13.9 Function Decorator</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="python_kapitel_13_010.htm#mjca1b2081508a228232b78471117cf515" class="navnav">13.10 assert</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="python_kapitel_13_011.htm#mj46ff656653ce2b43f6d5afd3cc57ec7f" class="navnav">13.11 Weitere Aspekte der Syntax</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="python_kapitel_13_011.htm#mj5cfc92f112171ba0c9429fe827eea9bf" class="navnav">13.11.1 Umbrechen langer Zeilen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="python_kapitel_13_011.htm#mj4ca46e5125c65f2879f164b604d1a3c4" class="navnav">13.11.2 Zusammenfügen mehrerer Zeilen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="python_kapitel_13_011.htm#mj139c488059c2024c3467473548c00f3e" class="navnav">13.11.3 String conversions</a></strong></td>
</tr>
</table><br></td>
</tr>
</table>
<table width="100%" cellpadding="20" cellspacing="0" border="0" bgcolor="#eeeeee">
<tr>
<td><div class="main"><a id="mj9d03049cdb368743dcb32d8c937ad98d" name="mj9d03049cdb368743dcb32d8c937ad98d"></a><a name="t21"></a><a name="t2t31"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang"></a></div>
<h2 class="t2"><span class="cfett">13.5</span><span class="cfett"> <a id="Rxx_ref179317954" name="Rxx_ref179317954"></a><a id="Rxx_ref179317950" name="Rxx_ref179317950"></a>Iteratoren</span>  <img src="common/15x15leer.gif" width="15" height="15" border="0" alt="top"><img src="common/15x15leer.gif" width="15" height="15" border="0" alt="Zur vorigen Überschrift"></h2>
<p>Sie sind bei der Lektüre dieses Buchs schon oft mit dem Begriff »iterierbares Objekt« konfrontiert worden, wobei Ihnen bisher nur gesagt wurde, dass Sie  solche Instanzen beispielsweise mit einer <span class="clisting">for</span>-Schleife durchlaufen oder bestimmten Funktionen, wie <span class="clisting">list</span>, als Parameter übergeben konnten. In diesem Kapitel werden wir uns nun endlich mit den Hintergründen und Funktionsweisen dieser Objekte befassen.</p>
<p>Ein sogenannter <span class="ckursiv">Iterator</span> ist eine Abstraktionsschicht, die es ermöglicht, auf die Elemente einer Sequenz über eine standardisierte Schnittstelle zuzugreifen. Bisher mussten Sie für den Zugriff auf die Elemente einer Sequenz oder eines  Dictionarys immer eine Referenz auf den Container, also die <span class="clisting">list</span>- oder <span class="clisting">dict</span>-Instanz, sowie den Index des jeweiligen Elements benutzen. Dies hatte den Nachteil, dass man dafür immer die Art der Indizes kennen musste, die die Datenstruktur anbot, weshalb man den Code für jeden Datentyp anpassen musste. Nun ist aber insbesondere das Durchlaufen aller Elemente einer Sequenz oder eines anderen Objekts, das mehrere Elemente speichert, eine Operation, die unabhängig von dem jeweiligen Datentyp immer auf das Gleiche hinausläuft. Um beispielsweise alle Elemente einer Sequenz auszugeben, benötige ich nacheinander Zugriff auf die Elemente, wobei es mir egal sein kann, ob dieser nun über numerische Indizes oder irgendeine andere Art von Schlüsseln bereitgestellt wird.</p>
<p>Deshalb wurden Iteratoren eingeführt, mit denen der jeweilige Datentyp sich selbst um die Bereitstellung der Elemente kümmert und die konkrete Implementation hinter einer einheitlichen Schnittstelle versteckt. Die dazu festgelegte Schnittstelle heißt <span class="ckursiv">Iterator-Protokoll</span> und ist folgendermaßen definiert:</p>
<p>Jede iterierbare Instanz muss eine parameterlose <span class="clisting">__iter__</span>-Methode implementieren, die ein <span class="ckursiv">Iterator-Objekt</span> zurückgibt. Das Iterator-Objekt muss ebenfalls eine <span class="clisting">__iter__</span>-Methode besitzen, die einfach eine Referenz auf das Objekt selbst zurückgibt. Außerdem muss es eine <span class="clisting">next</span>-Methode aufweisen, die bei jedem Aufruf das nächste Element des zu durchlaufenden Containers zurückgibt. Ist das Ende der Iteration erreicht, muss die <span class="clisting">next</span>-Methode die <span class="clisting">StopIteration</span>-Exception mittels <span class="clisting">raise</span> werfen.</p>
<p>Auf der anderen Seite, also da, wo die Iteration selbst stattfindet, muss, um das Durchleufen zu beginnen, mittels der Built-in Function iter eine Referenz auf den Iterator ermittelt werden. <span class="clisting">iter(objekt)</span> ruft dabei die <span class="clisting">__iter__</span>-Methode der Instanz <span class="clisting">objekt</span> auf und reicht das Ergebnis als Rückgabewert an die aufrufende Ebene weiter. Von der zurückgegebenen Iterator-Instanz kann dann so lange die <span class="clisting">next</span>-Methode aufgerufen werden, bis diese die <span class="clisting">StopIteration</span>-Exception wirft.</p>
<p>Um mehr Licht in diese abstrakte Beschreibung zu bringen, werden wir eine Klasse entwickeln, die uns über die Fibonacci-Folge iterieren lässt. Die Fibonacci-Folge ist eine Folge aus ganzen Zahlen, wobei jedes Element <span class="ckursiv">f(n)</span> durch die Summe seiner beiden Vorgänger <span class="ckursiv">f(n-2) + f(n-1)</span> berechnet werden kann. Die beiden ersten Elemente werden per Definition auf <span class="ckursiv">f(1) = f(2) = 1</span> gesetzt. Der Anfang der unendlichen Folge ist in der nachstehenden Tabelle gezeigt:</p><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<caption class="tabunter"><strong>Tabelle 13.1    </strong>Die ersten 14 Elemente der Fibonacci-Folge
</caption>
<tr>
<td class="tabellenkopf"><span class="ckursiv"><span class="ckursiv">n</span></span>
</td>
<td class="tabellentext">
<p>1</p>
</td>
<td class="tabellentext">
<p>2</p>
</td>
<td class="tabellentext">
<p>3</p>
</td>
<td class="tabellentext">
<p>4</p>
</td>
<td class="tabellentext">
<p>5</p>
</td>
<td class="tabellentext">
<p>6</p>
</td>
<td class="tabellentext">
<p>7</p>
</td>
<td class="tabellentext">
<p>8</p>
</td>
<td class="tabellentext">
<p>9</p>
</td>
<td class="tabellentext">
<p>10</p>
</td>
<td class="tabellentext">
<p>11</p>
</td>
<td class="tabellentext">
<p>12</p>
</td>
<td class="tabellentext">
<p>13</p>
</td>
<td class="tabellentext">
<p>14</p>
</td>
</tr>
<tr>
<td class="tabellenkopf"><span class="ckursiv"><span class="ckursiv">f(n)</span></span>
</td>
<td class="tabellentext">
<p>1</p>
</td>
<td class="tabellentext">
<p>1</p>
</td>
<td class="tabellentext">
<p>2</p>
</td>
<td class="tabellentext">
<p>3</p>
</td>
<td class="tabellentext">
<p>5</p>
</td>
<td class="tabellentext">
<p>8</p>
</td>
<td class="tabellentext">
<p>13</p>
</td>
<td class="tabellentext">
<p>21</p>
</td>
<td class="tabellentext">
<p>34</p>
</td>
<td class="tabellentext">
<p>55</p>
</td>
<td class="tabellentext">
<p>89</p>
</td>
<td class="tabellentext">
<p>144</p>
</td>
<td class="tabellentext">
<p>233</p>
</td>
<td class="tabellentext">
<p>377</p>
</td>
</tr>
</table><br><p>Die Folge kann unter anderem dazu verwendet werden, die idealisierte Entwicklung von Kaninchenpopulationen zu berechnen. Außerdem konvergiert der Quotient von aufeinanderfolgenden Elementen für große <span class="ckursiv">n</span> gegen den goldenen Schnitt ( = 1,618…), einem Verhältnis, das sich sehr oft in der Natur findet.</p>
<div class="listing"><pre class="prettyprint"><span class="cfett">class</span> Fibonacci(object): 
   <span class="cfett"> def</span> __init__(self, max_n): 
        self.MaxN = max_n 
        self.N = 0 
        self.A = 0 
        self.B = 0 
 
   <span class="cfett"> def</span> __iter__(self): 
        self.N = 0 
        self.A = 0 
        self.B = 1 
       <span class="cfett"> return</span> self 
 
   <span class="cfett"> def</span> next(self): 
       <span class="cfett"> if</span> self.N &lt; self.MaxN: 
            self.N += 1 
            self.A, self.B = self.B, self.A + self.B 
           <span class="cfett"> return</span> self.A 
       <span class="cfett"> else</span>: 
           <span class="cfett"> raise</span> StopIteration</pre></div>
<p>Unsere Klasse <span class="clisting">Fibonacci</span> erwartet als Parameter für ihren Konstruktor die Nummer des Elements, nach dem die Iteration stoppen soll. Diese Nummer speichern wir in dem privaten Attribut <span class="clisting">MaxN</span> und zählen dann mit dem Attribut <span class="clisting">N</span>, wie viele Elemente bereits zurückgegeben wurden. Um uns zwischen den <span class="clisting">next</span>-Aufrufen die aktuelle Position in der Folge zu merken und um das nächste Element berechnen zu können, speichern wir das zuletzt zurückgegebene Element und seinen Nachfolger in den Attributen <span class="clisting">A</span> und <span class="clisting">B</span> der <span class="clisting">Fibonacci</span>-Klasse. Wir werden keine separate Iterator-Klasse definieren und lassen deshalb die <span class="clisting">__iter__</span>-Methode eine Referenz auf die <span class="clisting">Fibonacci</span>-Instanz selbst, also <span class="clisting">self</span>, zurückgeben. Außerdem müssen beim Beginn des Durchlaufens die Speicher für das letzte nächste Element mit ihren Anfangswerten <span class="clisting">0</span> bzw. <span class="clisting">1</span> belegt und der <span class="clisting">N</span>-Zähler auf <span class="clisting">0</span> gesetzt werden. Die <span class="clisting">next</span>-Methode kümmert sich um die Berechnung des aktuellen Elements der Folge und aktualisiert die Zwischenspeicher und den Zähler. Ist das Ende der gewünschten Teilfolge erreicht, wird <span class="clisting">StopIteration</span> geworfen.</p>
<p>Die Klasse lässt sich nun mit allen Konstrukten verarbeiten, die das Iterator-Protokoll unterstützen, wie beispielsweise die <span class="clisting">for</span>-Schleife und die Built-in Functions <span class="clisting">list</span> oder <span class="clisting">sum</span>:</p>
<div class="listing"><pre class="prettyprint">&gt;&gt;&gt;<span class="cfett"> for</span> f<span class="cfett"> in</span> Fibonacci(14): 
       <span class="cfett"> print</span> f, 
1 1 2 3 5 8 13 21 34 55 89 144 233 377 
&gt;&gt;&gt; list(Fibonacci(16)) 
[1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987] 
&gt;&gt;&gt; sum(Fibonacci(60)) 
4052739537880L</pre></div>
<p>Mit einer kleinen Subklasse von <span class="clisting">Fibonacci</span> können wir auch einen Iterator erzeugen, der uns die Verhältnisse zweier aufeinanderfolgender Fibonacci-Zahlen durchlaufen lässt. Dabei sieht man sehr schnell, dass sich die Quotienten dem goldenen Schnitt nähern. Die Subklasse muss nur die <span class="clisting">next</span>-Methode der Fibonacci-Klasse überschreiben und dann anstatt der Folgenelemente die Quotienten zurückgeben. Dabei kommt es uns zugute, dass wir in dem Attribut <span class="clisting">B</span> bereits den Wert des nächsten Elements im Voraus berechnen. Die Implementation sieht dann folgendermaßen aus:</p>
<div class="listing"><pre class="prettyprint"><span class="cfett">class</span> GoldenerSchnitt(Fibonacci): 
   <span class="cfett"> def</span> next(self): 
        Fibonacci.next(self) 
       <span class="cfett"> return</span> float(self.B) / self.A</pre></div>
<p>Die Konvertierung von <span class="clisting">self.B</span> in eine Gleitkommazahl ist deshalb notwendig, damit keine Ganzzahldivision durchgeführt wird und die Nachkommastellen nicht verloren gehen. Schon die ersten vierzehn Elemente dieser Folge lassen die Konvergenz erkennen. (Der goldene Schnitt, bis auf sechs Nachkommastellen gerundet, lautet 1,618034.)</p>
<div class="listing"><pre class="prettyprint">&gt;&gt;&gt;<span class="cfett"> for</span> g<span class="cfett"> in</span> GoldenerSchnitt(14): 
   <span class="cfett"> print</span> "%.6f" % g, 
1.000000 2.000000 1.500000 1.666667 1.600000 1.625000 1.615385  
1.619048 1.617647 1.618182 1.617978 1.618056 1.618026 1.618037</pre></div>
<p>Es ist durchaus üblich, die <span class="clisting">__iter__</span>-Methode eines iterierbaren Objekts als Generator zu implementieren. Im Falle unserer Fibonacci-Folge läuft diese Technik auf wesentlich eleganteren Code hinaus, weil wir uns nun nicht mehr den Status des Iterators zwischen den <span class="clisting">next</span>-Aufrufen merken müssen und auch die explizite Definition von <span class="clisting">next</span> entfällt:</p>
<div class="listing"><pre class="prettyprint"><span class="cfett">class</span> Fibonacci2(object): 
   <span class="cfett"> def</span> __init__(self, max_n): 
        self.MaxN = max_n 
 
   <span class="cfett"> def</span> __iter__(self): 
        n = 0 
        a, b = 0, 1 
       <span class="cfett"> for</span><span class="clisting"> n</span><span class="cfett"> in</span><span class="clisting"> xrange(self.MaxN):</span> 
           <span class="clisting"> a, b = b, a + b</span> 
           <span class="cfett"> yield</span> a</pre></div>
<p>Instanzen der Klasse <span class="clisting">Fibonacci2</span> würden sich bei der Iteration genau wie die Lösung ohne Generator-Ansatz verhalten:</p>
<div class="listing"><pre class="prettyprint">&gt;&gt;&gt; list(Fibonacci2(10)) 
[1, 1, 2, 3, 5, 8, 13, 21, 34, 55]</pre></div>
<p>Allerdings ließe sich die Klasse <span class="clisting">GoldenerSchnitt</span> nicht mehr so einfach als Subklasse von <span class="clisting">Fibonacci2</span> implementieren, da die Zwischenspeicherung der Werte und auch die <span class="clisting">next</span>-Methode nun in dem Generator gekapselt sind.</p>
<h4 class="t4"><a id="Rxx_ref180777250" name="Rxx_ref180777250"></a><span class="cfett">Benutzung von Iteratoren</span></h4>
<p>Nun haben Sie gelernt, wie Sie eine gültige Iterator-Schnittstelle in ihren eigenen Klassen definieren können. Wir werden diese Thematik nun von der anderen Seite betrachten und uns damit beschäftigen, wie die Benutzung dieser Iterator-Schnittstelle aussieht, damit Sie auch Funktionen schreiben können, die nicht Listen oder andere Sequenzen, sondern beliebige iterierbare Instanzen verarbeiten können.</p>
<p>Wir betrachten zu diesem Zweck eine einfache <span class="clisting">for</span>-Schleife und werden dann hinter die Kulissen schauen, indem wir eine äquivalente Schleife ohne <span class="clisting">for</span> programmieren werden, die das Iterator-Protokoll explizit benutzt:</p>
<div class="listing"><pre class="prettyprint">&gt;&gt;&gt;<span class="cfett"> for</span> i<span class="cfett"> in</span> xrange(10): 
       <span class="cfett"> print</span> i, 
0 1 2 3 4 5 6 7 8 9</pre></div>
<p>Wie Sie bereits wissen, benötigen wir zum Durchlaufen einer Sequenz das dazugehörige Iterator-Objekt. Dieses liefert uns die Built-in Function <span class="clisting">iter</span>, die, wie schon in der Einleitung erklärt, die <span class="clisting">__iter__</span>-Methode des übergebenen Objekts aufruft:</p>
<div class="listing"><pre class="prettyprint">&gt;&gt;&gt; iter(xrange(10)) 
&lt;rangeiterator object at 0x01446608&gt;</pre></div>
<p>Über die <span class="clisting">next</span>-Methode das Iterator-Objekts können wir nun der Reihe nach alle Elemente ermitteln:</p>
<div class="listing"><pre class="prettyprint">&gt;&gt;&gt; i = iter(xrange(3)) 
&gt;&gt;&gt; i.next() 
0 
&gt;&gt;&gt; i.next() 
1 
&gt;&gt;&gt; i.next() 
2 
&gt;&gt;&gt; i.next() 
Traceback (most recent call last): 
  File "&lt;pyshell#41&gt;", line 1, in &lt;module&gt; 
    i.next() 
StopIteration</pre></div>
<p>Wird <span class="clisting">i.next</span> nach dem Zurückgeben des letzten Elements erneut aufgerufen, wirft die Methode erwartungsgemäß die <span class="clisting">StopIteration</span>-Exception. Wenn wir diese Exception mit einer <span class="clisting">try</span>/<span class="clisting">except</span>-Anweisung abfangen, können wir die <span class="clisting">for</span>-Schleife folgendermaßen nachbauen:</p>
<div class="listing"><pre class="prettyprint">&gt;&gt;&gt; i = iter(xrange(10)) 
&gt;&gt;&gt;<span class="cfett"> while</span> True: 
       <span class="cfett"> try</span>: 
           <span class="cfett"> print</span> i.next(), 
       <span class="cfett"> except</span> StopIteration: 
           <span class="cfett"> break</span> 
0 1 2 3 4 5 6 7 8 9</pre></div>
<p>Natürlich soll dieses Beispiel keine Aufforderung sein, in Zukunft keine <span class="clisting">for</span>-Schleifen mehr zu benutzen. Das Ziel unserer Bemühungen war es, Ihnen ein besseres Verständnis für die Benutzung von Iteratoren zu geben. Die <span class="clisting">for</span>-Schleife in Python ist natürlich nicht wie in dem Beispiel implementiert, sondern in eine optimierte Routine des Python-Interpreters ausgelagert. Dadurch erlaubt der Iterator-Ansatz auch eine Geschwindigkeitssteigerung, weil die Iteration durch eine maschinennahe C-Schleife übernommen werden kann.</p>
<p>Die <span class="clisting">for</span>-Schleife kann im Übrigen auch über einen Iterator selbst iterieren und muss diesen nicht selbst erzeugen. Die folgenden beiden Schleifen sind also äqivalent:</p>
<div class="listing"><pre class="prettyprint">&gt;&gt;&gt;<span class="cfett"> for</span> i<span class="cfett"> in</span> xrange(3): 
       <span class="cfett"> print</span> i, 
0 1 2 
&gt;&gt;&gt;<span class="cfett"> for</span> i<span class="cfett"> in</span> iter(xrange(3)): 
       <span class="cfett"> print</span> i, 
0 1 2</pre></div>
<p>Dass <span class="clisting">for</span> dabei, wie in der alternativen <span class="clisting">while</span>-Schleife verdeutlicht, noch einmal selbst <span class="clisting">iter</span> aufruft, ist insofern kein Problem, als die <span class="clisting">__iter__</span>-Methode eines Iterator-Objekts eine Referenz auf das Objekt selbst zurückgeben muss. Ist <span class="clisting">a</span> ein Iterator-Objekt, so gilt immer <span class="clisting">a == iter(a)</span>, wie das folgende Beispiel noch einmal verdeutlicht:</p>
<div class="listing"><pre class="prettyprint">&gt;&gt;&gt; a = iter(xrange(10))  # einen xrange-Iterator erzeugen 
&gt;&gt;&gt; a == iter(a) 
True</pre></div>
<p>Im Gegensatz dazu muss die <span class="clisting">__iter__</span>-Methode eines iterierbaren Objekts weder eine Referenz auf sich selbst noch immer dieselbe Iterator-Instanz zurückgeben:</p>
<div class="listing"><pre class="prettyprint">&gt;&gt;&gt; a = xrange(10)  # ein iterierbares Objekt erzeugen 
&gt;&gt;&gt; iter(a) == iter(a) 
False</pre></div>
<p>Im Umkehrschluss bedeutet dies, dass die Built-in Function <span class="clisting">iter</span> bei Aufrufen für dasselbe iterierbare Objekt verschiedene Iteratoren zurückgeben kann.</p>
<p>Dieses Verhalten kann zu relativ schwierig auffindbaren Fehlern führen. Stellen Sie sich einmal vor, Sie lesen eine Textdatei ein, die eine bestimmte Schlüsselzeile enthält. Alles, was vor dieser Schlüsselzeile steht, ist für Ihr Programm vollkommen uninteressant, denn Sie interessieren sich nur für den dahinterstehenden Teil. Da Sie bereits wissen, dass man über die Zeilen einer Datei mittels einer eleganten <span class="clisting">for</span>-Schleife iterieren kann, könnten Sie auf folgende Scheinlösung kommen:</p>
<div class="listing"><pre class="prettyprint">datei = open("textdatei.txt", "r")<span class="cfett"> 
for</span> zeile<span class="cfett"> in</span> datei: 
   <span class="cfett"> if</span> zeile.strip() == "Schlüsselzeile": 
       <span class="cfett"> break</span><br>
<span class="cfett">for</span> zeile<span class="cfett"> in</span> datei: 
   <span class="cfett"> print</span> zeile</pre></div>
<p>Der Grund, warum mit diesem Miniprogramm nicht nur die interessanten Zeilen hinter der <span class="clisting">"Schlüsselzeile"</span>, sondern alle Zeilen der Datei ausgegeben werden, liegt darin, dass beide Schleifen jeweils ihren eigenen Iterator für die Datei erzeugt haben. Deshalb wurde zu Beginn der zweiten <span class="clisting">for</span>-Schleife die Leseposition innehalb der Datei wieder an den Anfang gesetzt und somit alles ausgegeben. Mit ein paar kleinen Änderungen können wir die Schleifen aber dazu zwingen, sich einen Iterator zu teilen, und erreichen damit das gewünschte Verhalten:</p>
<div class="listing"><pre class="prettyprint">datei = open("textdatei.txt", "r") 
datei_iterator = iter(datei)<span class="cfett"> 
for</span> zeile<span class="cfett"> in</span> datei_iterator: 
   <span class="cfett"> if</span> zeile.strip() == "Schlüsselzeile": 
       <span class="cfett"> break</span><br>
<span class="cfett">for</span> zeile<span class="cfett"> in</span> datei_iterator: 
   <span class="cfett"> print</span> zeile</pre></div>
<p>Dadurch, dass die impliziten <span class="clisting">iter</span>-Aufrufe am Anfang der beiden <span class="clisting">for</span>-Schleifen nun Referenzen auf denselben Iterator zurückgeben, erscheinen nur die interessanten Informationen auf dem Bildschirm. Es kann also in manchen Fällen durchaus sinnvoll sein, explizit Iteratoren zu erzeugen und mit diesen zu arbeiten.</p>
<h4 class="t4"><span class="cfett">Nachteile von Iteratoren gegenüber dem direkten Zugriff über Indizes</span></h4>
<p>Neben den schon angesprochenen Vorteilen, dass einmal geschriebener Code für alle Datentypen, die das Iterator-Interface implementieren, gilt und dass durch die maschinennahe Implementation der Schnittstelle die Ausführung der Programme beschleunigt werden kann, gibt es auch Nachteile.</p>
<p>Iteratoren eignen sich hervorragend, um alle Elemente einer Sequenz zu durchlaufen und dies einheitlich für alle Container-Datentypen umzusetzen. Mit Indizes ist aber auch möglich, in beliebiger Reihenfolge auf die Elemente zuzugreifen und ihre Werte zu verändern, was mit dem Iterator-Ansatz nicht möglich ist.</p>
<p>Insofern lassen sich die Indizes nicht vollständig durch Iteratoren ersetzen, sondern werden für Spezialfälle durch sie ergänzt.</p>
<h4 class="t4"><span class="cfett">Alternative Definition für iterierbare Objekte</span></h4>
<p>Neben der oben beschriebenen Definition für iterierbare Objekte gibt es noch eine weitere Möglichkeit, eine Klasse iterierbar zu machen. Da es bei sehr vielen Folgen und Containern möglich ist, die Elemente einfach durchzunummerieren und über ganzzahlige Indizes anzusprechen, haben sich die Python-Entwickler dazu entschlossen, dass ein Objekt schon dann iterierbar ist, wenn man seine Elemente über die <span class="clisting">__getitem__</span>-Methode, also den <span class="clisting">[]</span>-Operator, ansprechen kann. Ruft man die Built-in Function <span class="clisting">iter</span> mit einer solchen Instanz als Parameter auf, kümmert Python sich um die Erzeugung des Iterators. Bei jedem Aufruf der <span class="clisting">next</span>-Methode des erzeugten Iterators wird die <span class="clisting">__getitem__</span>-Methode der iterierbaren Instanz aufgerufen, wobei immer eine Ganzzahl als Parameter übergeben wird. Die Zählung der übergebenen Indizes beginnt bei <span class="clisting">0</span> und endet erst, wenn die         <span class="clisting">__getitem__</span>-Methode einen <span class="clisting">IndexError</span> produziert, sobald ein ungültiger Index übergeben wurde.</p>
<p>Beispielsweise könnte eine Klasse zum Iterieren über die ersten <span class="clisting">max_n</span> Quadratzahlen folgendermaßen aussehen, wenn sie zudem noch das Bestimmen ihrer Länge mittels <span class="clisting">len</span> unterstützt:</p>
<div class="listing"><pre class="prettyprint"><span class="cfett">class</span> Quadrate(object): 
   <span class="cfett"> def</span> __init__(self, max_n): 
        self.MaxN = max_n 
 
   <span class="cfett"> def</span> __getitem__(self, index): 
        index += 1 # 0*0 ist nicht sehr interessant... 
       <span class="cfett"> if</span> index &gt; len(self)<span class="cfett"> or</span> index &lt; 1: 
           <span class="cfett"> raise</span> IndexError 
       <span class="cfett"> return</span> index*index 
 
   <span class="cfett"> def</span> __len__(self): 
       <span class="cfett"> return</span> self.MaxN</pre></div>
<p>Zur Demonstration dieses versteckten Iterators lassen wir uns eine Liste mit den ersten zwanzig Quadratzahlen ausgeben:</p>
<div class="listing"><pre class="prettyprint">&gt;&gt;&gt; list(Quadrate(20)) 
[1, 4, 9, 16, 25, 36, 49, 64, 81, 100, 121, 144, 169, 196, 225, 256, 289, 324, 361, 400]</pre></div>
<p>Es bleibt noch zu sagen, dass diese Art von Iterator-Definition nur in seltenen Fällen benutzt werden sollte, da sie einerseits wenig elegant und andererseits meistens langsamer als eine explizite Implementation des Iterator-Protokolls ist.</p>
<h4 class="t4"><span class="cfett">Funktionsiteratoren</span></h4>
<p>Die letzte Möglichkeit, in Python auf Iteratoren zurückzugreifen, stellen sogenannte <span class="ckursiv">Funktionsiteratoren</span> dar. Funktionsiteratoren sind Objekte, die eine bestimmte Funktion so lange aufrufen, bis diese einen bestimmten Wert, den <span class="ckursiv">Terminator</span> der Folge, zurückgibt. Einen Funktionsiterator kann man mit der Built-in Function <span class="clisting">iter</span> erzeugen, wobei als erster Parameter eine Referenz auf die Funktion, über die man iterieren möchte, und als zweiter Parameter der Wert des Terminators übergeben wird.</p>
<h5 class="t5"><a id="Rxx_ref180777268" name="Rxx_ref180777268"></a><span class="cfett">iter(funktion, terminator)</span></h5>
<p>Ein gutes Beispiel ist die Methode <span class="clisting">readline</span> des <span class="clisting">file</span>-Objekts, die so lange den Wert der nächsten Zeile zurückgibt, bis das Ende der Datei erreicht wurde. Wenn sich keine weiteren Daten mehr hinter der aktuellen Leseposition der <span class="clisting">file</span>-Instanz befinden, gibt <span class="clisting">readline</span> einen leeren String zurück. Läge eine Datei namens <span class="ckursiv">freunde.txt</span>, die die vier Namen <span class="clisting">"Lucas"</span>, <span class="clisting">"Florian"</span>, <span class="clisting">"Lars"</span> und <span class="clisting">"John"</span> in je einer separaten Zeile enthält, so könnten wir folgendermaßen über sie iterieren und würden die nachstehende Ausgabe erhalten:</p>
<div class="listing"><pre class="prettyprint">&gt;&gt;&gt; datei = open("freunde.txt") 
&gt;&gt;&gt;<span class="cfett"> for</span> zeile<span class="cfett"> in</span> iter(datei.readline, ""): 
       <span class="cfett"> print</span> zeile.strip(), 
Lucas Florian Lars John</pre></div><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellenkopf"><span class="cfett">Anmerkung</span>
</td>
</tr>
<tr>
<td class="tabellentext" rowspan="3">
Dieses Beispiel dient nur der Veranschaulichung von Funktionsiteratoren. Über die Zeilen einer Datei können Sie natürlich auch weiterhin direkt mit</p>
<div class="listing"><pre class="prettyprint">&gt;&gt;&gt; <span class="cfett">for</span> zeile <span class="cfett">in</span> datei: 
...     <span class="cfett">print</span> zeile.strip(),</pre></div>
iterieren.</p>
</td>
</tr>
</table><br><br><hr><a name="kommentar"></a><h3>Ihr Kommentar</h3>
                       Wie hat Ihnen das &lt;openbook&gt; gefallen? Wir freuen uns immer über Ihre freundlichen und kritischen Rückmeldungen.
                       <form action="http://www.galileo-press.de/feedback/openbook" method="post" style="text-align: center; margin-top: 10px;"><input type="hidden" name="openbookurl" value="http://www.galileocomputing.de/openbook/python/python_kapitel_13_005.htm"><input type="hidden" name="buchtitel" value="Python"><input type="hidden" name="Kapitel" value="13.5 Iteratoren"><table border="0">
<tr>
<td><label for="name">Name</label><br></td>
<td><input type="text" name="name" id="name" size="40"><br></td>
</tr>
<tr>
<td><label for="email">E-Mail</label><br></td>
<td><input type="text" name="email" id="email" size="40"><br></td>
</tr>
<tr>
<td valign="top"><label for="comment">Ihr Kommentar</label><br></td>
<td><textarea name="comment" id="comment" rows="10" cols="40"></textarea><br></td>
</tr>
<tr>
<td>
</td>
<td><input type="submit" value="Kommentar absenden"></td>
</tr>
</table>
</form>
</div></td>
</tr>
</table></td>
</tr>
<tr>
<td width="100%" class="start" colspan="1" height="22" align="center"><table width="100%" border="0" cellspacing="0" cellpadding="0">
<tr>
<td width="25%"><a href="python_kapitel_13_004.htm" class="navnav"> &lt;&lt;   zurück</a></td>
<td width="49%"><div align="center"><a class="navnav" href="#">&lt;top&gt;</a></div></td>
<td align="right" width="25%"><div align="right"><a href="python_kapitel_13_006.htm" class="navnav">vor   &gt;&gt; </a></div></td>
</tr>
</table></td>
</tr>
</table>
</div></td>
<td width="10" valign="top">  </td>
<td width="160" valign="top">
    <table border="0" cellpadding="0" cellspacing="0" width="160">
        <tr>
            <td>
                <table border="0" cellpadding="0" cellspacing="0" width="100%">
                    <tr>
                        <td class="start" height="20" colspan="2">
                            &nbsp;<a href="http://www.galileocomputing.de/katalog/buecher/?GPP=oppy" class="autor">
                            <strong>Zum Katalog</strong></a>
                        </td>
                    </tr>
                    <tr>
                        <td valign="top" class="tbl4" width="2">
                            <img src="common/leer.gif" border="0" height="1" width="1"></td>
                        <td valign="top">
                            <table cellspacing="3">
                                <tr>
                                    <td><a href="http://www.galileocomputing.de/1626?GPP=oppy">
                                        <img src="common/1110_90px.gif" width="105" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: Python" title="Zum Katalog: Python">
                                        <br /><br /><br /><br /><br /><br /><br /><strong>Python</strong><br /><img src="common/pfeil_rechts5.gif" border="0" alt="">bestellen</a>
                                    </td>
                                </tr>
                            </table>
                        </td>
                    </tr>
                </table>
            </td>
        </tr>
        <tr>
            <td><img src="common/leer.gif" height="2" width="1" border="0" /></img></td>
        </tr>
        <tr>
            <td>
                <table border="0" cellpadding="0" cellspacing="0" width="100%">
                    <tr>
                        <td class="start" height="20" colspan="2"><span class="autor"><strong>&nbsp;Ihre Meinung?</strong></a></td>
                    </tr>
                    <tr>
                        <td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td>
                        <td valign="top">
                            <table cellspacing="3">
                                <tr>
                                    <td>Wie hat Ihnen das &lt;openbook&gt; gefallen?<br /><a href="#kommentar"><img src="common/pfeil_rechts5.gif" border="0" alt="">Ihre Meinung</a>
                                    <br /><br /></td>
                                </tr>
                            </table>
                        </td>
                    </tr>
                </table>
            </td>
        </tr>
        <tr>
            <td><img src="common/leer.gif" height="2" width="1" border="0" /></img></td>
        </tr>
        <tr>
            <td>
                <table border="0" cellpadding="0" cellspacing="0" width="100%">
                    <tr>
                        <td class="start" height="20" colspan="2">&nbsp;<a href="http://www.galileocomputing.de/katalog/buecher/?GPP=oppy" class="autor"><strong>Buchtipps</strong></a></td>
                    </tr>
                    <tr>
                        <td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
                        <a href="http://www.galileocomputing.de/1579?GPP=oppy">
                        <img src="common/9783836210904_s.gif" width="119" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: Linux" title="Zum Katalog: Linux"><br /><br /><br /><br /><br /><br /><br />&nbsp;Linux</a><br /><br /></td>
                    </tr>
                    <tr>
                        <td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
                        <a href="http://www.galileocomputing.de/1337?GPP=oppy">
                        <img src="common/9783898428484_s.gif" width="105" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: Ubuntu GNU/Linux" title="Zum Katalog: Ubuntu GNU/Linux"><br /><br /><br /><br /><br /><br /><br>&nbsp;Ubuntu GNU/Linux</a><br /><br /></td>
                    </tr>
                    <tr>
                        <td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
                        <a href="http://www.galileocomputing.de/1451?GPP=oppy">
                        <img src="common/9783836210874_s.gif" width="112" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: Praxisbuch Web 2.0" title="Zum Katalog: Praxisbuch Web 2.0"><br /><br /><br /><br /><br /><br /><br />&nbsp;Praxisbuch Web 2.0</a><br /><br /></td>
                    </tr>
                    <tr>
                        <td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
                        <a href="http://www.galileocomputing.de/1142?GPP=oppy">
                        <img src="common/9783898427388_s.gif" width="105" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: UML 2.0" title="Zum Katalog: UML 2.0"><br /><br /><br /><br /><br /><br /><br />&nbsp;UML 2.0</a><br /><br /></td>
                    </tr>
                    <tr>
                        <td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
                        <a href="http://www.galileocomputing.de/966?GPP=oppy">
                        <img src="common/9783898426244_s.gif" width="94" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: Praxisbuch Objektorientierung" title="Zum Katalog: Praxisbuch Objektorientierung"><br /><br /><br /><br /><br /><br /><br />&nbsp;Praxisbuch Objektorientierung</a><br /><br /></td>
                    </tr>
                    <tr>
                        <td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
                        <a href="http://www.galileocomputing.de/1477?GPP=oppy">
                        <img src="common/1039_90px.gif" width="105" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: Einstieg in SQL" title="Zum Katalog: Einstieg in SQL"><br /><br /><br /><br /><br /><br /><br />&nbsp;Einstieg in SQL</a><br /><br /></td>
                    </tr>
                    <tr>
                        <td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
                        <a href="http://www.galileocomputing.de/1234?GPP=oppy">
                        <img src="common/1015_90px.gif" width="105" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: IT-Handbuch für Fachinformatiker" title="Zum Katalog: IT-Handbuch für Fachinformatiker"><br /><br /><br /><br /><br /><br /><br>&nbsp;IT-Handbuch für Fachinformatiker</a><br /><br /></td>
                    </tr>
                </table></td>
        </tr>
        <tr>
            <td><img src="common/leer.gif" height="2" width="1" border="0" /></img></td>
        </tr>
        <tr>
            <td>
                <table border="0" cellpadding="0" cellspacing="0" width="100%">
                    <tr>
                        <td class="start" height="20" colspan="2"><span class="autor"><strong>&nbsp;Shopping</strong></span></td>
                    </tr>
                    <tr>
                        <td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td>
                        <td valign="top">
                            <table cellspacing="3">
                                <tr>
                                    <td><b>Versandkostenfrei</b> bestellen in Deutschland und &Ouml;sterreich<br /><a href="http://www.galileocomputing.de/hilfe/Shop/?GPP=oppy"><img src="common/pfeil_rechts5.gif" border="0" alt="Info">Info</a><br /><br /></td>
                                </tr>
                            </table>
                        </td>
                    </tr>
                </table>
            </td>
        </tr>
    </table>
</td>
</tr>
</table><br><br><hr width="70%" align="center"><br><div align="center">
<p class="standard"><b>Copyright © Galileo Press 2008</b><br>Für Ihren privaten Gebrauch dürfen Sie die Online-Version natürlich ausdrucken. Ansonsten unterliegt das &lt;openbook&gt; denselben Bestimmungen, wie die gebundene Ausgabe: Das Werk einschließlich aller seiner Teile ist urheberrechtlich geschützt. Alle Rechte vorbehalten einschließlich der Vervielfältigung, Übersetzung, Mikroverfilmung sowie Einspeicherung und Verarbeitung in elektronischen Systemen.</p><br><a href="http://www.galileocomputing.de/">[Galileo Computing]</a><br><br>Galileo Press, Rheinwerkallee 4, 53227 Bonn, Tel.: 0228.42150.0, Fax 0228.42150.77, <a href="mailto:info@galileo-press.de">info@galileo-press.de</a></div><br><br></body>

</html>
