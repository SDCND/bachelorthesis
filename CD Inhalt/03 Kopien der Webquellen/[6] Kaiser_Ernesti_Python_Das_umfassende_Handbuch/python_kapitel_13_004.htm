<html>
<head>
<META http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<title>Galileo Computing :: Python – 13.4 Generatoren</title>
<meta name="title" content="Galileo Computing :: Python - 13.4 Generatoren">
<meta name="author" content="Peter Kaiser, Johannes Ernesti">
<meta name="publisher" content="Galileo Press 2008">
<meta name="copyright" content="Galileo Press 2008">
<meta name="Description" content="Python - Das umfassende Handbuch – 13.4 Generatoren">
<meta name="audience" content="Alle">
<meta name="robots" content="INDEX,FOLLOW">
<meta http-equiv="content-language" content="de">
<link rel="stylesheet" type="text/css" href="common/galileo_open.css">
<link rel="prev" href="python_kapitel_13_003.htm">
<link rel="next" href="python_kapitel_13_005.htm"><script type="text/javascript"><!--
    function OpenWin(url,name,height,width)
    {
      var InfoWin = window.open(url,name,"directories=0,height="+height+",width=" + width + ",hotkeys=0,location=0,menubar=0,resizable=1,screenX=150,screenY=10,left=150,top=10,scrollbars=1,status=1,titlebar=0,toolbar=0");
      InfoWin.focus();
    }
    //--></script><link href="common/prettify.css" type="text/css" rel="stylesheet"><script type="text/javascript" src="common/prettify.js"></script></head>
<body vlink="#000099" link="#000099" alink="#000099" onload="prettyPrint()">
<table width="100%" border="0" cellpadding="0" cellspacing="0" bgcolor="#000066">
<tr>
<td height="74" valign="bottom" colspan="2"><a href="http://www.galileocomputing.de/katalog/openbook?GPP=oppy"><img src="common/galileocomputing_openbook.gif" width="200" height="56" border="0" alt="Galileo Computing < openbook >" title="Galileo Computing < openbook >"></a></td>
<td width="80" height="74"><a href="http://www.galileocomputing.de/?GPP=oppy"><img src="common/galileocomputing.gif" border="0" alt="Galileo Computing - Professionelle Bücher. Auch für Einsteiger." title="Galileo Computing - Professionelle Bücher. Auch für Einsteiger."></a></td>
</tr>
</table>
<div align="right"><a href="http://www.galileocomputing.de/?GPP=oppy" class="navnav">Professionelle Bücher. Auch für Einsteiger.</a></div><br><table class="tbl" border="0" cellpadding="0" cellspacing="0" width="100%">
<tr>
<td width="190" valign="top">
<table class="tbl1" border="0" cellpadding="3" cellspacing="0" width="190" align="left">
<tr>
<td class="tbl2"><a class="nav" href="index.htm#_top">Inhaltsverzeichnis</a></td>
</tr>
<tr>
<td><a class="navnav" href="python_kapitel_01_001.htm#mj67a594b305e4109145454ddc0d55999c">1 Einleitung</a></td>
</tr>
<tr>
<td><a class="navnav" href="python_kapitel_02_001.htm#mjddfab2e530e1ced3efb614b75430300d">2 Überblick über Python</a></td>
</tr>
<tr>
<td><a class="navnav" href="python_kapitel_03_001.htm#mj936060d19c41bd12bf740798a2280ed0">3 Die Arbeit mit Python</a></td>
</tr>
<tr>
<td><a class="navnav" href="python_kapitel_04_001.htm#mj4c3be3990be6964addc0f6d0dc22f9d8">4 Der interaktive Modus</a></td>
</tr>
<tr>
<td><a class="navnav" href="python_kapitel_05_001.htm#mjddf21128ad2999d9e2a37e5112a0af06">5 Grundlegendes zu Python-Programmen</a></td>
</tr>
<tr>
<td><a class="navnav" href="python_kapitel_06_001.htm#mj3c43dbe4a08e5559d01e50286484c126">6 Kontrollstrukturen</a></td>
</tr>
<tr>
<td><a class="navnav" href="python_kapitel_07_001.htm#mj4ebbbff6e4edb4fe615e242a01d77f27">7 Das Laufzeitmodell</a></td>
</tr>
<tr>
<td><a class="navnav" href="python_kapitel_08_001.htm#mj5434917b0e68fc12d539b3d9f605c69d">8 Basisdatentypen</a></td>
</tr>
<tr>
<td><a class="navnav" href="python_kapitel_09_001.htm#mj7db54ea5091e23f706b1786ead1a782f">9 Benutzerinteraktion und Dateizugriff</a></td>
</tr>
<tr>
<td><a class="navnav" href="python_kapitel_10_001.htm#mjf74b0a739c10c2f7132913c19e91246f">10 Funktionen</a></td>
</tr>
<tr>
<td><a class="navnav" href="python_kapitel_11_001.htm#mj3e41238df9387de38f2c931eba1bfeb9">11 Modularisierung</a></td>
</tr>
<tr>
<td><a class="navnav" href="python_kapitel_12_001.htm#mjcd1790d94142bd3f3a263231dbf0e3f7">12 Objektorientierung</a></td>
</tr>
<tr>
<td><a class="navh" href="##mj4ec2d9702da110e2dacd99679d3c813d">13 Weitere Spracheigenschaften</a></td>
</tr>
<tr>
<td><a class="navnav" href="python_kapitel_14_001.htm#mj22b60f53fd2027b93c076a524242b35b">14 Mathematik</a></td>
</tr>
<tr>
<td><a class="navnav" href="python_kapitel_15_001.htm#mjca183f321ad76918bcff867c4ffe4fab">15 Strings</a></td>
</tr>
<tr>
<td><a class="navnav" href="python_kapitel_16_001.htm#mjbc5f03a28f08a0ff6fff3f6eafb13845">16 Datum und Zeit</a></td>
</tr>
<tr>
<td><a class="navnav" href="python_kapitel_17_001.htm#mj1ca63a01c44856e9ecf8daef9834ac38">17 Schnittstelle zum Betriebssystem</a></td>
</tr>
<tr>
<td><a class="navnav" href="python_kapitel_18_001.htm#mj9e2e147ec7c1c409ab62884ed2afaa21">18 Parallele Programmierung</a></td>
</tr>
<tr>
<td><a class="navnav" href="python_kapitel_19_001.htm#mj5f8739be6f0fbee26d20565b4eeb8166">19 Datenspeicherung</a></td>
</tr>
<tr>
<td><a class="navnav" href="python_kapitel_20_001.htm#mj6a610f312e2abfe628f8f50a8629087d">20 Netzwerkkommunikation</a></td>
</tr>
<tr>
<td><a class="navnav" href="python_kapitel_21_001.htm#mjd1f17b81729d3362ce1283c29a6064f5">21 Debugging</a></td>
</tr>
<tr>
<td><a class="navnav" href="python_kapitel_22_001.htm#mj7398fb17f09867fc123360d9b3066e94">22 Distribution von Python-Projekten</a></td>
</tr>
<tr>
<td><a class="navnav" href="python_kapitel_23_001.htm#mj2213eb2f7fc258333f88f873ac4a8051">23 Optimierung</a></td>
</tr>
<tr>
<td><a class="navnav" href="python_kapitel_24_001.htm#mj0bdf563dc1f3ef7638dab0dfb6bdd753">24 Grafische Benutzeroberflächen</a></td>
</tr>
<tr>
<td><a class="navnav" href="python_kapitel_25_001.htm#mjbea967a6f2023581a39d524b6d91a141">25 Python als serverseitige Programmiersprache im WWW mit Django</a></td>
</tr>
<tr>
<td><a class="navnav" href="python_kapitel_26_001.htm#mj43e9e45f2e92366984e5b113f832514f">26 Anbindung an andere Programmiersprachen</a></td>
</tr>
<tr>
<td><a class="navnav" href="python_kapitel_27_001.htm#mj30bed08497d2de4e7e72cbdeefa9fc78">27 Insiderwissen</a></td>
</tr>
<tr>
<td><a class="navnav" href="python_kapitel_28_001.htm#mj8586665aff70d4410c8ba7725befb825">28 Zukunft von Python</a></td>
</tr>
<tr>
<td><a class="navnav" href="python_kapitel_A_001.htm#mjd7cca37a6c80d7ec0d715951f4148f05">A Anhang</a></td>
</tr>
<tr>
<td><a class="navnav" href="stichwort.htm#_top">Stichwort</a></td>
</tr>
<tr>
<td><br><a href="http://download.galileo-press.de/openbook/python/galileocomputing_python.zip" class="navnav"><strong>Download:</strong><br>- ZIP, ca. 4,8 MB</a></td>
</tr>
<tr>
<td><a href="http://www.galileocomputing.de/1626?GPP=oppy" class="navnav">Buch bestellen</a></td>
</tr>
<tr>
<td><a class="navnav" href="#kommentar">Ihre Meinung?</a><br><br></td>
</tr>
</table>
</td>
<td width="10"><img src="common/spacer10.gif" width="10" height="10" alt="Spacer"></td>
<td width="85%" valign="top" align="center"><div align="center">
<table width="98%" border="0" cellspacing="0" cellpadding="0" bgcolor="#FFFFFF">
<tr>
<td width="100%" class="start" colspan="1" height="22" align="center"><table width="100%" border="0" cellspacing="0" cellpadding="0">
<tr>
<td width="25%"><a href="python_kapitel_13_003.htm" class="navnav"> &lt;&lt;   zurück</a></td>
<td width="49%"><div align="center"><a href="http://www.galileocomputing.de/?GPP=oppy" class="navnav">Galileo Computing /</a><a href="http://www.galileocomputing.de/katalog/openbook/?GPP=oppy" class="navnav"> &lt;openbook&gt; /</a><a href="index.htm" class="navnav"> Python</a></div></td>
<td align="right" width="25%"><div align="right"><a href="python_kapitel_13_005.htm" class="navnav">vor   &gt;&gt; </a></div></td>
</tr>
</table></td>
</tr>
<tr>
<td width="100%" valign="top"><table width="100%" border="0" cellpadding="10" cellspacing="0" class="box">
<tr>
<td colspan="2"><a href="http://www.galileocomputing.de/1626?GPP=oppy" class="buchtitel">Python</a><span class="autor"> von Peter Kaiser, Johannes Ernesti</span><br><span class="untertitel">Das umfassende Handbuch - Aktuell zu Python 2.5</span></td>
</tr>
<tr>
<td valign="top" width="211"><dl>
<dt><a href="http://www.galileocomputing.de/1626?GPP=oppy" class="navnav"><img src="common/9783836211109.gif" border="0" alt="Buch: Python" title="Buch: Python"></a></dt>
<dd><br><a href="http://www.galileocomputing.de/1626?GPP=oppy"><span class="autor"><strong>Python</strong><br>gebunden, mit CD<br>819 S., 39,90 Euro<br>Galileo Computing<br>ISBN 978-3-8362-1110-9</span></a></dd>
</dl></td>
<td width="80%"><table border="0">
<tr>
<td valign="baseline"><img src="common/pfeil_u.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="3" class="kap"><strong><a href="python_kapitel_13_001.htm#mj4ec2d9702da110e2dacd99679d3c813d" class="navnav">13 Weitere Spracheigenschaften</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="python_kapitel_13_001.htm#mj9c47e95ef0de2b51b8795360350d0a36" class="navnav">13.1 Exception Handling</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="python_kapitel_13_001.htm#mj3f943e2f2b146758936395ab700b1a95" class="navnav">13.1.1 Eingebaute Exceptions</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="python_kapitel_13_001.htm#mj9a39e9bacbeb90df594e637f72c3e6ab" class="navnav">13.1.2 Werfen einer Exception</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="python_kapitel_13_001.htm#mj2bf223cf5076971dac89ce850f422655" class="navnav">13.1.3 Abfangen einer Exception</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="python_kapitel_13_001.htm#mj895579472648ac2c14f13006f018c0ab" class="navnav">13.1.4 Eigene Exceptions</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="python_kapitel_13_001.htm#mjb2e82a98750dc84939d28981bc7dd025" class="navnav">13.1.5 Erneutes Werfen einer Exception</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="python_kapitel_13_002.htm#mjde4dfaadeda6f0449d0fe28c495d80eb" class="navnav">13.2 List Comprehensions</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="python_kapitel_13_003.htm#mj4f43dabfe129e9471aaf49d6abe8d0cc" class="navnav">13.3 Docstrings</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="#mjac0bfc00292240b2c8d8cf0edee8f986" class="navh">13.4 Generatoren</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="python_kapitel_13_005.htm#mj9d03049cdb368743dcb32d8c937ad98d" class="navnav">13.5 Iteratoren</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="python_kapitel_13_006.htm#mjaa7fba753afb73402cf1ee2f39350c3f" class="navnav">13.6 Interpreter im Interpreter</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="python_kapitel_13_007.htm#mjdd13a8178c498ff3a23ce9a22856d14d" class="navnav">13.7 Geplante Sprachelemente</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="python_kapitel_13_008.htm#mj7d0d3991b4235110254b1112cbcd4a2b" class="navnav">13.8 Die with-Anweisung</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="python_kapitel_13_009.htm#mj9d7c6bf482ebc41e3bd636b21d9fede6" class="navnav">13.9 Function Decorator</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="python_kapitel_13_010.htm#mjca1b2081508a228232b78471117cf515" class="navnav">13.10 assert</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="python_kapitel_13_011.htm#mj46ff656653ce2b43f6d5afd3cc57ec7f" class="navnav">13.11 Weitere Aspekte der Syntax</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="python_kapitel_13_011.htm#mj5cfc92f112171ba0c9429fe827eea9bf" class="navnav">13.11.1 Umbrechen langer Zeilen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="python_kapitel_13_011.htm#mj4ca46e5125c65f2879f164b604d1a3c4" class="navnav">13.11.2 Zusammenfügen mehrerer Zeilen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="python_kapitel_13_011.htm#mj139c488059c2024c3467473548c00f3e" class="navnav">13.11.3 String conversions</a></strong></td>
</tr>
</table><br></td>
</tr>
</table>
<table width="100%" cellpadding="20" cellspacing="0" border="0" bgcolor="#eeeeee">
<tr>
<td><div class="main"><a id="mjac0bfc00292240b2c8d8cf0edee8f986" name="mjac0bfc00292240b2c8d8cf0edee8f986"></a><a name="t21"></a><a name="t2t31"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang"></a></div>
<h2 class="t2"><span class="cfett">13.4</span><span class="cfett"> <a id="Rxx_ref180663356" name="Rxx_ref180663356"></a>Generatoren</span>  <img src="common/15x15leer.gif" width="15" height="15" border="0" alt="top"><img src="common/15x15leer.gif" width="15" height="15" border="0" alt="Zur vorigen Überschrift"></h2>
<p>In diesem Abschnitt werden wir uns mit dem Konzept der Generatoren beschäftigen, die eine komfortable Möglichkeit anbieten, Reihen von Werten zu verarbeiten. Weil sich das noch sehr abstrakt anhört, wollen wir direkt mit einem Beispiel beginnen. Sie erinnern sich sicherlich noch an die Built-in Function <span class="clisting">range</span>, die im Zusammenhang mit <span class="clisting">for</span>-Schleifen eine wichtige Rolle spielt:</p>
<div class="listing"><pre class="prettyprint">&gt;&gt;&gt;<span class="cfett"> for</span> i<span class="cfett"> in</span> range(10): 
       <span class="cfett"> print</span> i, 
0 1 2 3 4 5 6 7 8 9</pre></div>
<p>Wie wir bereits wissen, gibt <span class="clisting">range</span> eine <span class="clisting">list</span>-Instanz zurück, die in diesem Fall die ganzen Zahlen von <span class="clisting">0</span> bis <span class="clisting">9</span> enthält. Über diese Liste können wir dann mittels der <span class="clisting">for</span>-Schleife iterieren und erhalten die Ausgabe aller Ziffern. Für kleine Listen ist dieses Vorgehen auch vollkommen angemessen, allerdings wird es höchst ineffizient, wenn man sehr große Listen durchlaufen möchte, weil erst die komplette Liste im Speicher aufgebaut werden muss. Wir benötigen aber eigentlich pro Schleifendurchlauf nur eine einzige Zahl im Arbeitsspeicher, nämlich den aktuellen Zähler. Die gesamte Liste brauchen wir zu keiner Zeit.</p>
<p>Nun könnte man auf die Idee kommen, das Problem mithilfe einer <span class="clisting">while</span>-Schleife zu umgehen, indem man den Zähler manuell verwaltet:</p>
<div class="listing"><pre class="prettyprint">&gt;&gt;&gt; i = 0 
&gt;&gt;&gt;<span class="cfett"> while</span> i &lt; 10: 
       <span class="cfett"> print</span> i, 
        i += 1</pre></div>
<p>Dieses Vorgehen, bei dem man um Pythons eigene <span class="clisting">for</span>-Schleife »herumprogrammiert«, ist wenig elegant und widerspricht außerdem Pythons Grundsatz, klare und deshalb gut lesbare Programme zu schreiben. Allerdings würden weder Rechenzeit noch Speicherplatz für die Erzeugung der unnötigen Liste vergeudet.</p>
<p>Wir wünschen uns eine Technik, die die Lesbarkeit einer normalen <span class="clisting">for</span>-Schleife mit der Effizienz der <span class="clisting">while</span>-Schleife aus dem letzten Beispiel vereint.</p>
<p>An dieser Stelle kommen die sogenannten <span class="ckursiv">Generatoren</span> ins Spiel. Ein Generator ist eine Funktion, die bei jedem Aufruf das nächste Element einer virtuellen Sequenz zurückgibt. Für unser Beispiel bräuchten wir also einen Generator, der nacheinander alle zehn Ziffern zurückgibt. Die Definition dieser auch <span class="ckursiv">Generatorfunktionen</span> genannten Konstrukte ist der von normalen Funktionen sehr ähnlich. Der von uns benötigte Generator, wir nennen ihn <span class="clisting">range_generator</span>, lässt sich folgendermaßen implementieren (wundern Sie sich bitte nicht über das »<span class="clisting">yield</span>«, es wird im Anschluss erklärt):</p>
<div class="listing"><pre class="prettyprint"><span class="cfett">def</span> range_generator(max): 
    i = 0 
   <span class="cfett"> while</span> i &lt; max: 
       <span class="cfett"> yield</span> i 
        i += 1</pre></div>
<p>Sie werden nun sicherlich sagen, dass wir einfach die ungeschickte <span class="clisting">while</span>-Schleife in eine Funktion verpackt haben und diese Lösung dadurch immer noch wenig elegant ist. Der Unterschied zu der vorhergehenden <span class="clisting">while</span>-Schleife besteht aber darin, dass wir mithilfe von unserem neuen Generator namens <span class="clisting">range_generator</span> elegante und gleichzeitig schnelle <span class="clisting">for</span>-Schleifen schreiben können:</p>
<div class="listing"><pre class="prettyprint">&gt;&gt;&gt;<span class="cfett"> for</span> i<span class="cfett"> in</span> range_generator(10): 
       <span class="cfett"> print</span> i, 
0 1 2 3 4 5 6 7 8 9</pre></div>
<p>Der Funktionsaufruf <span class="clisting">range_generator(10)</span> gibt ein iterierbares Objekt (die <span class="clisting">generator</span>-Instanz) zurück, das mit einer <span class="clisting">for</span>-Schleife durchlaufen werden kann. Wir müssen also nur einmal mit der <span class="clisting">while</span>-Notlösung arbeiten und können anschließend ganz normale <span class="clisting">for</span>-Schleifen benutzen, wodurch unser Code sehr viel besser lesbar und schneller wird.</p>
<p>Der Knackpunkt bei Generatoren liegt in dem <span class="clisting">yield</span>-Statement, mit dem wir die einzelnen Werte der virtuellen Sequenz zurückgeben. Die Syntax von <span class="clisting">yield</span> unterscheidet sich dabei nicht von der des <span class="clisting">return</span>-Statements und muss deshalb nicht weiter erläutert werden. Entscheidend ist, wie <span class="clisting">yield</span> sich im Vergleich zu <span class="clisting">return</span> auf die Verarbeitung des Programms auswirkt.</p>
<p>Wird in einer normalen Funktion während eines Programmlaufs ein <span class="clisting">return</span> erreicht, wird der Kontrollfluss an die nächsthöhere Ebene zurückgegeben und der Funktionslauf beendet. Außerdem werden alle lokalen Variablen der Funktion wieder freigegeben. Bei einem erneuten Aufruf der Funktion würde Python wieder ganz am Anfang der Funktion beginnen und die komplette Funktion erneut ausführen.</p>
<p>Im Gegensatz dazu werden beim Erreichen einer <span class="clisting">yield</span>-Anweisung die aktuelle Position innerhalb der Generatorfunktion und ihre lokalen Variablen gespeichert, und es erfolgt ein Rücksprung in das aufrufende Programm mit dem hinter <span class="clisting">yield</span> angegebenen Wert. Beim nächsten Iteratoraufruf macht Python dann hinter dem zuletzt ausgeführten <span class="clisting">yield</span> weiter und kann wieder auf die alten lokalen Variablen, in dem Fall <span class="clisting">i</span>,  zugreifen. Erst wenn das Ende der Funktion erreicht wird, beginnen die endgültigen Aufräumarbeiten.</p>
<p>Weil die oben beschriebene Generatorfunktion <span class="clisting">range_generator</span> äußerst oft gebraucht wird, ist sie bereits in Python unter dem Namen <span class="clisting">xrange</span> vordefiniert. Die Funktion <span class="clisting">xrange</span> erwartet die gleichen Parameter wie <span class="clisting">range</span> und verhält sich auch sonst genauso &#8211; mit der einzigen Ausnahme, dass sie eben keine echte Liste erzeugt, sondern die Elemente nacheinander berechnet. Für Ihre zukünftigen <span class="clisting">for</span>-Schleifen empfehlen wir Ihnen deshalb immer, <span class="clisting">xrange</span> zu verwenden.</p>
<div class="listing"><pre class="prettyprint">&gt;&gt;&gt;<span class="clistingk"> for</span> i<span class="clistingk"> in</span> xrange(2, 5): 
       <span class="clistingk"> print</span> i, i*i, i**3, i**4 
2 4 8 16 
3 9 27 81 
4 16 64 256</pre></div>
<p>Generatoren sind sehr flexibel und können durchaus mehrere <span class="clisting">yield</span>-Anweisungen enthalten:</p>
<div class="listing"><pre class="prettyprint"><span class="cfett">def</span> generator_mit_mehreren_yields(): 
    a = 10 
   <span class="cfett"> yield</span> a 
   <span class="cfett"> yield</span> a*2 
    b = 5 
   <span class="cfett"> yield</span> a+b</pre></div>
<p>Auch dieser Generator kann mit einer <span class="clisting">for</span>-Schleife durchlaufen werden:</p>
<div class="listing"><pre class="prettyprint">&gt;&gt;&gt;<span class="cfett"> for</span> i<span class="cfett"> in</span> generator_mit_mehreren_yields(): 
       <span class="cfett"> print</span> i, 
10 20 15</pre></div>
<p>Im ersten Iterationsschritt wird die lokale Variable <span class="clisting">a</span> in der Generatorfunktion angelegt und ihr Wert dann mittels <span class="clisting">yield a</span> an die Schleife übergeben. Beim nächsten Schleifendurchlauf wird dann bei <span class="clisting">yield a*2</span> weitergemacht, wobei die zurückgegebene <span class="clisting">20</span> zeigt, dass der Wert von <span class="clisting">a</span> tatsächlich zwischen den Aufrufen erhalten geblieben ist. Während des letzten Iterationsschritts erzeugen wir zusätzlich die lokale Variable <span class="clisting">b</span> mit dem Wert <span class="clisting">5</span> und geben die Summe von <span class="clisting">a</span> und <span class="clisting">b</span> an die Schleife weiter, wodurch die <span class="clisting">15</span> ausgegeben wird. Da nun das Ende der Generatorfunktion erreicht ist, bricht die Schleife nach drei Durchläufen ab.</p>
<p>Es ist auch möglich, eine Generatorfunktion frühzeitig zu verlassen, wenn dies erforderlich sein sollte. Um dies zu erreichen, benutzt man das <span class="clisting">return</span>-Statement ohne Rückgabewert. Der folgende Generator erzeugt abhängig vom Wert des optionalen Parameters <span class="clisting">auch_jungen</span> eine Folge aus zwei Mädchennamen oder zwei Mädchen- und Jungennamen:</p>
<div class="listing"><pre class="prettyprint"><span class="cfett">def</span> namen(auch_jungen=True): 
   <span class="cfett"> yield</span> "Sonja" 
   <span class="cfett"> yield</span> "Lisa" 
   <span class="cfett"> if not</span> auch_jungen: 
       <span class="cfett"> return</span> 
   <span class="cfett"> yield</span> "Florian" 
   <span class="cfett"> yield</span> "Jan"</pre></div>
<p>Mithilfe von der Built-in Function <span class="clisting">list</span> können wir aus den Werten des Generators eine Liste erstellen, die entweder nur <span class="clisting">"Sonja"</span> und <span class="clisting">"Lisa"</span> oder zusätzlich <span class="clisting">"Florian"</span> und <span class="clisting">"Jan"</span> enthält:</p>
<div class="listing"><pre class="prettyprint">&gt;&gt;&gt; list(namen()) 
['Sonja', 'Lisa', 'Florian', 'Jan'] 
&gt;&gt;&gt; list(namen(False)) 
['Sonja', 'Lisa']</pre></div>
<h4 class="t4"><span class="cfett">Generator Expressions</span></h4>
<p>Sie erinnern sich sicherlich noch an die sogenannten List Comprehensions, mit denen Sie auf einfache Weise Listen erzeugen konnten. Mit solchen List Comprehensions konnten Sie beispielsweise eine Liste mit den ersten zehn Quadratzahlen erzeugen:</p>
<div class="listing"><pre class="prettyprint">&gt;&gt;&gt; [i*i for i in range(1, 11)] 
[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]</pre></div>
<p>Wenn wir nun die Summe dieser ersten zehn Quadratzahlen bestimmen wollten, könnten wir das mithilfe der Built-in-Function <span class="clisting">sum</span> erreichen, indem wir schreiben:</p>
<div class="listing"><pre class="prettyprint">&gt;&gt;&gt; sum([i*i for i in range(1, 11)]) 
385</pre></div>
<p>So weit, so gut. Allerdings wurde hier wieder eine nicht benötigte <span class="clisting">list</span>-Instanz erzeugt, die Speicherplatz vergeudet.</p>
<p>Um auch in solchen Fällen nicht auf den Komfort von List Comprehensions verzichten zu müssen, wurden sogenannte <span class="ckursiv">Generator Expressions</span> eingeführt. Generator Expressions sehen genauso aus wie die entsprechenden List Comprehensions, mit der Ausnahme, dass statt der eckigen Klammern <span class="clisting">[]</span> die runden Klammern <span class="clisting">()</span> als Begrenzung verwendet werden. Damit können wir das obige Beispiel speicherschonend mit einer Generator Expression formulieren:</p>
<div class="listing"><pre class="prettyprint">&gt;&gt;&gt; sum((i*i for i in range(1, 11))) 
385</pre></div>
<p>Die umschließenden runden Klammern können entfallen, wenn der Ausdruck sowieso schon geklammert ist. In unserem <span class="clisting">sum</span>-Beispiel können wir also ein Klammerpaar entfernen:</p>
<div class="listing"><pre class="prettyprint">&gt;&gt;&gt; sum(i*i for i in range(1, 11)) 
385</pre></div>
<p>Ein wichtiger Unterschied zu List Comprehensions betrifft die Seiteneffekte. Betrachten wir mal das folgende Beispiel, das List Comprehensions benutzt:</p>
<div class="listing"><pre class="prettyprint">&gt;&gt;&gt; x = "Ob ich wohl meinen Wert behalte?" 
&gt;&gt;&gt; sum([x*x<span class="cfett"> for</span> x<span class="cfett"> in</span> range(1, 11)]) 
385 
&gt;&gt;&gt; x 
10</pre></div>
<p>Wie Sie sehen, wurde der Wert der globalen Variablen <span class="clisting">x</span> durch den Zähler der List Comprehension überschrieben. Benutzen wir einen Generator, um die Quadratzahlen zu erzeugen, ergibt sich folgendes Bild:</p>
<div class="listing"><pre class="prettyprint">&gt;&gt;&gt; x = "Ob ich wohl meinen Wert behalte?" 
&gt;&gt;&gt; sum(x*x<span class="cfett"> for</span> x<span class="cfett"> in</span> range(1, 11)) 
385 
&gt;&gt;&gt; x 
'Ob ich wohl meinen Wert behalte?'</pre></div>
<p>Hier wurde das globale <span class="clisting">x</span> nicht angetastet und bei seinem Anfangswert belassen. Sie sollten sich dieser möglichen Seiteneffekte bei List Comprehensions bewusst sein, gerade dann, wenn Sie eine vorhandene Generator Expression durch eine List Comprehension ersetzen möchten. [Dieses merkwürdige Verhalten kommt daher, dass die Python-Entwickler beim Einführen der List-Comprehension etwas unachtsam gewesen sind und solche Seiteneffekte zugelassen haben. Als man dies bemerkte, konnte man es nicht mehr ändern, da bereits geschriebene Programme durch eine entsprechende Änderung unter Umständen nicht mehr korrekt arbeiten würden. Erst mit Python 3000, das Ende 2008 erscheint, wird dieser Mangel beseitigt. Die später erst in die Sprache aufgenommenen Generator-Expressions wurden von Anfang an ohne gefährliche Seiteneffekte eingeführt.
] </p>
<p>Generatoren können Ihnen helfen, Ihre Programme sowohl in der Lesbarkeit als auch hinsichtlich der Ausführungsgeschwindigkeit zu verbessern. Immer dann, wenn Sie es mit einer komplizierten und dadurch schlecht lesbaren <span class="clisting">while</span>-Schleife zu tun haben, sollten Sie prüfen, ob ein Generator die Aufgabe nicht eleganter übernehmen kann.</p>
<p>Wir haben uns in diesem Kapitel auf die Definition von Generatoren und ihre Anwendung in der <span class="clisting">for</span>-Schleife oder mit <span class="clisting">list</span> beschränkt. Im folgenden Abschnitt werden Sie die Hintergründe und die technische Umsetzung kennenlernen, denn hinter den Generatoren und der <span class="clisting">for</span>-Schleife steht das Konzept der Iteratoren.</p><br><hr><a name="kommentar"></a><h3>Ihr Kommentar</h3>
                       Wie hat Ihnen das &lt;openbook&gt; gefallen? Wir freuen uns immer über Ihre freundlichen und kritischen Rückmeldungen.
                       <form action="http://www.galileo-press.de/feedback/openbook" method="post" style="text-align: center; margin-top: 10px;"><input type="hidden" name="openbookurl" value="http://www.galileocomputing.de/openbook/python/python_kapitel_13_004.htm"><input type="hidden" name="buchtitel" value="Python"><input type="hidden" name="Kapitel" value="13.4 Generatoren"><table border="0">
<tr>
<td><label for="name">Name</label><br></td>
<td><input type="text" name="name" id="name" size="40"><br></td>
</tr>
<tr>
<td><label for="email">E-Mail</label><br></td>
<td><input type="text" name="email" id="email" size="40"><br></td>
</tr>
<tr>
<td valign="top"><label for="comment">Ihr Kommentar</label><br></td>
<td><textarea name="comment" id="comment" rows="10" cols="40"></textarea><br></td>
</tr>
<tr>
<td>
</td>
<td><input type="submit" value="Kommentar absenden"></td>
</tr>
</table>
</form>
</div></td>
</tr>
</table></td>
</tr>
<tr>
<td width="100%" class="start" colspan="1" height="22" align="center"><table width="100%" border="0" cellspacing="0" cellpadding="0">
<tr>
<td width="25%"><a href="python_kapitel_13_003.htm" class="navnav"> &lt;&lt;   zurück</a></td>
<td width="49%"><div align="center"><a class="navnav" href="#">&lt;top&gt;</a></div></td>
<td align="right" width="25%"><div align="right"><a href="python_kapitel_13_005.htm" class="navnav">vor   &gt;&gt; </a></div></td>
</tr>
</table></td>
</tr>
</table>
</div></td>
<td width="10" valign="top">  </td>
<td width="160" valign="top">
    <table border="0" cellpadding="0" cellspacing="0" width="160">
        <tr>
            <td>
                <table border="0" cellpadding="0" cellspacing="0" width="100%">
                    <tr>
                        <td class="start" height="20" colspan="2">
                            &nbsp;<a href="http://www.galileocomputing.de/katalog/buecher/?GPP=oppy" class="autor">
                            <strong>Zum Katalog</strong></a>
                        </td>
                    </tr>
                    <tr>
                        <td valign="top" class="tbl4" width="2">
                            <img src="common/leer.gif" border="0" height="1" width="1"></td>
                        <td valign="top">
                            <table cellspacing="3">
                                <tr>
                                    <td><a href="http://www.galileocomputing.de/1626?GPP=oppy">
                                        <img src="common/1110_90px.gif" width="105" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: Python" title="Zum Katalog: Python">
                                        <br /><br /><br /><br /><br /><br /><br /><strong>Python</strong><br /><img src="common/pfeil_rechts5.gif" border="0" alt="">bestellen</a>
                                    </td>
                                </tr>
                            </table>
                        </td>
                    </tr>
                </table>
            </td>
        </tr>
        <tr>
            <td><img src="common/leer.gif" height="2" width="1" border="0" /></img></td>
        </tr>
        <tr>
            <td>
                <table border="0" cellpadding="0" cellspacing="0" width="100%">
                    <tr>
                        <td class="start" height="20" colspan="2"><span class="autor"><strong>&nbsp;Ihre Meinung?</strong></a></td>
                    </tr>
                    <tr>
                        <td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td>
                        <td valign="top">
                            <table cellspacing="3">
                                <tr>
                                    <td>Wie hat Ihnen das &lt;openbook&gt; gefallen?<br /><a href="#kommentar"><img src="common/pfeil_rechts5.gif" border="0" alt="">Ihre Meinung</a>
                                    <br /><br /></td>
                                </tr>
                            </table>
                        </td>
                    </tr>
                </table>
            </td>
        </tr>
        <tr>
            <td><img src="common/leer.gif" height="2" width="1" border="0" /></img></td>
        </tr>
        <tr>
            <td>
                <table border="0" cellpadding="0" cellspacing="0" width="100%">
                    <tr>
                        <td class="start" height="20" colspan="2">&nbsp;<a href="http://www.galileocomputing.de/katalog/buecher/?GPP=oppy" class="autor"><strong>Buchtipps</strong></a></td>
                    </tr>
                    <tr>
                        <td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
                        <a href="http://www.galileocomputing.de/1579?GPP=oppy">
                        <img src="common/9783836210904_s.gif" width="119" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: Linux" title="Zum Katalog: Linux"><br /><br /><br /><br /><br /><br /><br />&nbsp;Linux</a><br /><br /></td>
                    </tr>
                    <tr>
                        <td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
                        <a href="http://www.galileocomputing.de/1337?GPP=oppy">
                        <img src="common/9783898428484_s.gif" width="105" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: Ubuntu GNU/Linux" title="Zum Katalog: Ubuntu GNU/Linux"><br /><br /><br /><br /><br /><br /><br>&nbsp;Ubuntu GNU/Linux</a><br /><br /></td>
                    </tr>
                    <tr>
                        <td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
                        <a href="http://www.galileocomputing.de/1451?GPP=oppy">
                        <img src="common/9783836210874_s.gif" width="112" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: Praxisbuch Web 2.0" title="Zum Katalog: Praxisbuch Web 2.0"><br /><br /><br /><br /><br /><br /><br />&nbsp;Praxisbuch Web 2.0</a><br /><br /></td>
                    </tr>
                    <tr>
                        <td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
                        <a href="http://www.galileocomputing.de/1142?GPP=oppy">
                        <img src="common/9783898427388_s.gif" width="105" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: UML 2.0" title="Zum Katalog: UML 2.0"><br /><br /><br /><br /><br /><br /><br />&nbsp;UML 2.0</a><br /><br /></td>
                    </tr>
                    <tr>
                        <td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
                        <a href="http://www.galileocomputing.de/966?GPP=oppy">
                        <img src="common/9783898426244_s.gif" width="94" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: Praxisbuch Objektorientierung" title="Zum Katalog: Praxisbuch Objektorientierung"><br /><br /><br /><br /><br /><br /><br />&nbsp;Praxisbuch Objektorientierung</a><br /><br /></td>
                    </tr>
                    <tr>
                        <td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
                        <a href="http://www.galileocomputing.de/1477?GPP=oppy">
                        <img src="common/1039_90px.gif" width="105" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: Einstieg in SQL" title="Zum Katalog: Einstieg in SQL"><br /><br /><br /><br /><br /><br /><br />&nbsp;Einstieg in SQL</a><br /><br /></td>
                    </tr>
                    <tr>
                        <td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
                        <a href="http://www.galileocomputing.de/1234?GPP=oppy">
                        <img src="common/1015_90px.gif" width="105" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: IT-Handbuch für Fachinformatiker" title="Zum Katalog: IT-Handbuch für Fachinformatiker"><br /><br /><br /><br /><br /><br /><br>&nbsp;IT-Handbuch für Fachinformatiker</a><br /><br /></td>
                    </tr>
                </table></td>
        </tr>
        <tr>
            <td><img src="common/leer.gif" height="2" width="1" border="0" /></img></td>
        </tr>
        <tr>
            <td>
                <table border="0" cellpadding="0" cellspacing="0" width="100%">
                    <tr>
                        <td class="start" height="20" colspan="2"><span class="autor"><strong>&nbsp;Shopping</strong></span></td>
                    </tr>
                    <tr>
                        <td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td>
                        <td valign="top">
                            <table cellspacing="3">
                                <tr>
                                    <td><b>Versandkostenfrei</b> bestellen in Deutschland und &Ouml;sterreich<br /><a href="http://www.galileocomputing.de/hilfe/Shop/?GPP=oppy"><img src="common/pfeil_rechts5.gif" border="0" alt="Info">Info</a><br /><br /></td>
                                </tr>
                            </table>
                        </td>
                    </tr>
                </table>
            </td>
        </tr>
    </table>
</td>
</tr>
</table><br><br><hr width="70%" align="center"><br><div align="center">
<p class="standard"><b>Copyright © Galileo Press 2008</b><br>Für Ihren privaten Gebrauch dürfen Sie die Online-Version natürlich ausdrucken. Ansonsten unterliegt das &lt;openbook&gt; denselben Bestimmungen, wie die gebundene Ausgabe: Das Werk einschließlich aller seiner Teile ist urheberrechtlich geschützt. Alle Rechte vorbehalten einschließlich der Vervielfältigung, Übersetzung, Mikroverfilmung sowie Einspeicherung und Verarbeitung in elektronischen Systemen.</p><br><a href="http://www.galileocomputing.de/">[Galileo Computing]</a><br><br>Galileo Press, Rheinwerkallee 4, 53227 Bonn, Tel.: 0228.42150.0, Fax 0228.42150.77, <a href="mailto:info@galileo-press.de">info@galileo-press.de</a></div><br><br></body>

</html>
