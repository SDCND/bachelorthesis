<html>
<head>
<META http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<title>Galileo Computing :: Python – 9.3 Dateien</title>
<meta name="title" content="Galileo Computing :: Python - 9.3 Dateien">
<meta name="author" content="Peter Kaiser, Johannes Ernesti">
<meta name="publisher" content="Galileo Press 2008">
<meta name="copyright" content="Galileo Press 2008">
<meta name="Description" content="Python - Das umfassende Handbuch – 9.3 Dateien">
<meta name="audience" content="Alle">
<meta name="robots" content="INDEX,FOLLOW">
<meta http-equiv="content-language" content="de">
<link rel="stylesheet" type="text/css" href="common/galileo_open.css">
<link rel="prev" href="python_kapitel_09_002.htm">
<link rel="next" href="python_kapitel_10_001.htm"><script type="text/javascript"><!--
    function OpenWin(url,name,height,width)
    {
      var InfoWin = window.open(url,name,"directories=0,height="+height+",width=" + width + ",hotkeys=0,location=0,menubar=0,resizable=1,screenX=150,screenY=10,left=150,top=10,scrollbars=1,status=1,titlebar=0,toolbar=0");
      InfoWin.focus();
    }
    //--></script><link href="common/prettify.css" type="text/css" rel="stylesheet"><script type="text/javascript" src="common/prettify.js"></script></head>
<body vlink="#000099" link="#000099" alink="#000099" onload="prettyPrint()">
<table width="100%" border="0" cellpadding="0" cellspacing="0" bgcolor="#000066">
<tr>
<td height="74" valign="bottom" colspan="2"><a href="http://www.galileocomputing.de/katalog/openbook?GPP=oppy"><img src="common/galileocomputing_openbook.gif" width="200" height="56" border="0" alt="Galileo Computing < openbook >" title="Galileo Computing < openbook >"></a></td>
<td width="80" height="74"><a href="http://www.galileocomputing.de/?GPP=oppy"><img src="common/galileocomputing.gif" border="0" alt="Galileo Computing - Professionelle Bücher. Auch für Einsteiger." title="Galileo Computing - Professionelle Bücher. Auch für Einsteiger."></a></td>
</tr>
</table>
<div align="right"><a href="http://www.galileocomputing.de/?GPP=oppy" class="navnav">Professionelle Bücher. Auch für Einsteiger.</a></div><br><table class="tbl" border="0" cellpadding="0" cellspacing="0" width="100%">
<tr>
<td width="190" valign="top">
<table class="tbl1" border="0" cellpadding="3" cellspacing="0" width="190" align="left">
<tr>
<td class="tbl2"><a class="nav" href="index.htm#_top">Inhaltsverzeichnis</a></td>
</tr>
<tr>
<td><a class="navnav" href="python_kapitel_01_001.htm#mj67a594b305e4109145454ddc0d55999c">1 Einleitung</a></td>
</tr>
<tr>
<td><a class="navnav" href="python_kapitel_02_001.htm#mjddfab2e530e1ced3efb614b75430300d">2 Überblick über Python</a></td>
</tr>
<tr>
<td><a class="navnav" href="python_kapitel_03_001.htm#mj936060d19c41bd12bf740798a2280ed0">3 Die Arbeit mit Python</a></td>
</tr>
<tr>
<td><a class="navnav" href="python_kapitel_04_001.htm#mj4c3be3990be6964addc0f6d0dc22f9d8">4 Der interaktive Modus</a></td>
</tr>
<tr>
<td><a class="navnav" href="python_kapitel_05_001.htm#mjddf21128ad2999d9e2a37e5112a0af06">5 Grundlegendes zu Python-Programmen</a></td>
</tr>
<tr>
<td><a class="navnav" href="python_kapitel_06_001.htm#mj3c43dbe4a08e5559d01e50286484c126">6 Kontrollstrukturen</a></td>
</tr>
<tr>
<td><a class="navnav" href="python_kapitel_07_001.htm#mj4ebbbff6e4edb4fe615e242a01d77f27">7 Das Laufzeitmodell</a></td>
</tr>
<tr>
<td><a class="navnav" href="python_kapitel_08_001.htm#mj5434917b0e68fc12d539b3d9f605c69d">8 Basisdatentypen</a></td>
</tr>
<tr>
<td><a class="navh" href="##mj7db54ea5091e23f706b1786ead1a782f">9 Benutzerinteraktion und Dateizugriff</a></td>
</tr>
<tr>
<td><a class="navnav" href="python_kapitel_10_001.htm#mjf74b0a739c10c2f7132913c19e91246f">10 Funktionen</a></td>
</tr>
<tr>
<td><a class="navnav" href="python_kapitel_11_001.htm#mj3e41238df9387de38f2c931eba1bfeb9">11 Modularisierung</a></td>
</tr>
<tr>
<td><a class="navnav" href="python_kapitel_12_001.htm#mjcd1790d94142bd3f3a263231dbf0e3f7">12 Objektorientierung</a></td>
</tr>
<tr>
<td><a class="navnav" href="python_kapitel_13_001.htm#mj4ec2d9702da110e2dacd99679d3c813d">13 Weitere Spracheigenschaften</a></td>
</tr>
<tr>
<td><a class="navnav" href="python_kapitel_14_001.htm#mj22b60f53fd2027b93c076a524242b35b">14 Mathematik</a></td>
</tr>
<tr>
<td><a class="navnav" href="python_kapitel_15_001.htm#mjca183f321ad76918bcff867c4ffe4fab">15 Strings</a></td>
</tr>
<tr>
<td><a class="navnav" href="python_kapitel_16_001.htm#mjbc5f03a28f08a0ff6fff3f6eafb13845">16 Datum und Zeit</a></td>
</tr>
<tr>
<td><a class="navnav" href="python_kapitel_17_001.htm#mj1ca63a01c44856e9ecf8daef9834ac38">17 Schnittstelle zum Betriebssystem</a></td>
</tr>
<tr>
<td><a class="navnav" href="python_kapitel_18_001.htm#mj9e2e147ec7c1c409ab62884ed2afaa21">18 Parallele Programmierung</a></td>
</tr>
<tr>
<td><a class="navnav" href="python_kapitel_19_001.htm#mj5f8739be6f0fbee26d20565b4eeb8166">19 Datenspeicherung</a></td>
</tr>
<tr>
<td><a class="navnav" href="python_kapitel_20_001.htm#mj6a610f312e2abfe628f8f50a8629087d">20 Netzwerkkommunikation</a></td>
</tr>
<tr>
<td><a class="navnav" href="python_kapitel_21_001.htm#mjd1f17b81729d3362ce1283c29a6064f5">21 Debugging</a></td>
</tr>
<tr>
<td><a class="navnav" href="python_kapitel_22_001.htm#mj7398fb17f09867fc123360d9b3066e94">22 Distribution von Python-Projekten</a></td>
</tr>
<tr>
<td><a class="navnav" href="python_kapitel_23_001.htm#mj2213eb2f7fc258333f88f873ac4a8051">23 Optimierung</a></td>
</tr>
<tr>
<td><a class="navnav" href="python_kapitel_24_001.htm#mj0bdf563dc1f3ef7638dab0dfb6bdd753">24 Grafische Benutzeroberflächen</a></td>
</tr>
<tr>
<td><a class="navnav" href="python_kapitel_25_001.htm#mjbea967a6f2023581a39d524b6d91a141">25 Python als serverseitige Programmiersprache im WWW mit Django</a></td>
</tr>
<tr>
<td><a class="navnav" href="python_kapitel_26_001.htm#mj43e9e45f2e92366984e5b113f832514f">26 Anbindung an andere Programmiersprachen</a></td>
</tr>
<tr>
<td><a class="navnav" href="python_kapitel_27_001.htm#mj30bed08497d2de4e7e72cbdeefa9fc78">27 Insiderwissen</a></td>
</tr>
<tr>
<td><a class="navnav" href="python_kapitel_28_001.htm#mj8586665aff70d4410c8ba7725befb825">28 Zukunft von Python</a></td>
</tr>
<tr>
<td><a class="navnav" href="python_kapitel_A_001.htm#mjd7cca37a6c80d7ec0d715951f4148f05">A Anhang</a></td>
</tr>
<tr>
<td><a class="navnav" href="stichwort.htm#_top">Stichwort</a></td>
</tr>
<tr>
<td><br><a href="http://download.galileo-press.de/openbook/python/galileocomputing_python.zip" class="navnav"><strong>Download:</strong><br>- ZIP, ca. 4,8 MB</a></td>
</tr>
<tr>
<td><a href="http://www.galileocomputing.de/1626?GPP=oppy" class="navnav">Buch bestellen</a></td>
</tr>
<tr>
<td><a class="navnav" href="#kommentar">Ihre Meinung?</a><br><br></td>
</tr>
</table>
</td>
<td width="10"><img src="common/spacer10.gif" width="10" height="10" alt="Spacer"></td>
<td width="85%" valign="top" align="center"><div align="center">
<table width="98%" border="0" cellspacing="0" cellpadding="0" bgcolor="#FFFFFF">
<tr>
<td width="100%" class="start" colspan="1" height="22" align="center"><table width="100%" border="0" cellspacing="0" cellpadding="0">
<tr>
<td width="25%"><a href="python_kapitel_09_002.htm" class="navnav"> &lt;&lt;   zurück</a></td>
<td width="49%"><div align="center"><a href="http://www.galileocomputing.de/?GPP=oppy" class="navnav">Galileo Computing /</a><a href="http://www.galileocomputing.de/katalog/openbook/?GPP=oppy" class="navnav"> &lt;openbook&gt; /</a><a href="index.htm" class="navnav"> Python</a></div></td>
<td align="right" width="25%"><div align="right"><a href="python_kapitel_10_001.htm" class="navnav">vor   &gt;&gt; </a></div></td>
</tr>
</table></td>
</tr>
<tr>
<td width="100%" valign="top"><table width="100%" border="0" cellpadding="10" cellspacing="0" class="box">
<tr>
<td colspan="2"><a href="http://www.galileocomputing.de/1626?GPP=oppy" class="buchtitel">Python</a><span class="autor"> von Peter Kaiser, Johannes Ernesti</span><br><span class="untertitel">Das umfassende Handbuch - Aktuell zu Python 2.5</span></td>
</tr>
<tr>
<td valign="top" width="211"><dl>
<dt><a href="http://www.galileocomputing.de/1626?GPP=oppy" class="navnav"><img src="common/9783836211109.gif" border="0" alt="Buch: Python" title="Buch: Python"></a></dt>
<dd><br><a href="http://www.galileocomputing.de/1626?GPP=oppy"><span class="autor"><strong>Python</strong><br>gebunden, mit CD<br>819 S., 39,90 Euro<br>Galileo Computing<br>ISBN 978-3-8362-1110-9</span></a></dd>
</dl></td>
<td width="80%"><table border="0">
<tr>
<td valign="baseline"><img src="common/pfeil_u.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="3" class="kap"><strong><a href="python_kapitel_09_001.htm#mj7db54ea5091e23f706b1786ead1a782f" class="navnav">9 Benutzerinteraktion und Dateizugriff</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="python_kapitel_09_001.htm#mje3f21bf4453c496b348aedd2885a9be8" class="navnav">9.1 Bildschirmausgaben</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="python_kapitel_09_002.htm#mj49c928ba352990cbb589d4e766232117" class="navnav">9.2 Tastatureingaben</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="#mjee715ebd4cb57ea71d18e730beda809d" class="navh">9.3 Dateien</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="#mj43036b22986c06b3d873886bf8ab81c3" class="navh">9.3.1 Datenströme</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="#mjf25a0f6f7736a878d5dabdac21d3a754" class="navh">9.3.2 Daten aus einer Datei auslesen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="#mj5f2eea63ac9295fe7d517241f3bae93b" class="navh">9.3.3 Daten in eine Datei schreiben</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="#mjca7424dda57d0e881fcbddf831a4a523" class="navh">9.3.4 Verwendung des Dateiobjekts</a></strong></td>
</tr>
</table><br></td>
</tr>
</table>
<table width="100%" cellpadding="20" cellspacing="0" border="0" bgcolor="#eeeeee">
<tr>
<td><div class="main"><a id="mjee715ebd4cb57ea71d18e730beda809d" name="mjee715ebd4cb57ea71d18e730beda809d"></a><a name="t21"></a><a name="t2t31"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang"></a></div>
<h2 class="t2"><span class="cfett">9.3</span><span class="cfett"> <a id="Rxx_ref170503060" name="Rxx_ref170503060"></a>Dateien</span>  <a href="#t2t32"><img src="common/down.gif" width="15" height="15" border="0" alt="Zur nächsten Überschrift"></a><img src="common/15x15leer.gif" width="15" height="15" border="0" alt="Zur vorigen Überschrift"></h2>
<p>Sie wissen jetzt, wie man Daten auf dem Bildschirm ausgeben und vom Benutzer einlesen kann. Fehlt noch die dritte Disziplin, die in diesem Kapitel behandelt werden soll: das Lesen und Schreiben von Dateien.</p>
<p>Dies sollte zum Standardrepertoire eines jeden Programmierers gehören &#8211; sei es, um Daten abzuspeichern, die später wieder verwendet werden sollen, oder um eine Logdatei zu führen, die den Programmablauf protokolliert.</p>
<p>Bevor das Lesen und Schreiben von Dateien in Python behandelt wird, müssen wir uns ganz allgemein mit Datenströmen befassen.</p><a id="mj43036b22986c06b3d873886bf8ab81c3" name="mj43036b22986c06b3d873886bf8ab81c3"></a><a name="t31"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang"></a></div><a name="t2t32"></a><h3 class="t3"><span class="cfett">9.3.1</span><span class="cfett"> Datenströme</span>  <a href="#t2t33"><img src="common/down.gif" width="15" height="15" border="0" alt="Zur nächsten Überschrift"></a><a href="#t2t31"><img src="common/top.gif" width="15" height="15" border="0" alt="Zur vorigen Überschrift"></a></h3>
<p>Unter einem <span class="ckursiv">Datenstrom</span> (engl. <span class="ckursiv">data stream</span>) versteht man eine kontinuierliche Folge von Daten. Dabei werden zwei Typen unterschieden: Von eingehenden Datenströmen (engl. <span class="ckursiv">downstreams</span>) können Daten gelesen und in ausgehende Datenströme (engl. <span class="ckursiv">upstreams</span>) geschrieben werden. Bildschirmausgaben, Tastatureingaben sowie Dateien und sogar Netzwerkverbindungen werden als Datenstrom betrachtet.</p>
<p>Es gibt zwei Standarddatenströme, die Sie, ohne es zu wissen, bereits verwendet haben. Sowohl die Ausgabe eines Strings auf dem Bildschirm als auch eine Benutzereingabe sind nichts anderes als Operationen auf den Standardein- bzw. -ausgabeströmen <span class="clisting">stdin</span> und <span class="clisting">stdout</span>.</p>
<p>Einige Betriebssysteme, darunter vor allem Windows, erlauben es, Datenströme im Text- und Binärmodus zu öffnen. Der Unterschied besteht darin, dass im Textmodus bestimmte binäre Steuerzeichen berücksichtigt werden. So wird ein im Textmodus geöffneter Strom beispielsweise nur bis zum ersten Auftreten des sogenannten EOF-Zeichens gelesen. Im Binärmodus hingegen wird der vollständige Inhalt des Datenstroms eingelesen.</p>
<p>Als letzte Unterscheidung gibt es Datenströme, in denen man sich beliebig positionieren kann, und solche, in denen das nicht geht. Eine Datei stellt zum Beispiel einen Datenstrom dar, in dem die Schreib-/Leseposition beliebig festgelegt werden kann. Ein Beispiel für einen Datenstrom, in dem das nicht funktioniert, wäre der Standardeingabestrom (<span class="clisting">stdin</span>) oder eine Netzwerkverbindung.</p><a id="mjf25a0f6f7736a878d5dabdac21d3a754" name="mjf25a0f6f7736a878d5dabdac21d3a754"></a><a name="t32"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang"></a></div><a name="t2t33"></a><h3 class="t3"><span class="cfett">9.3.2</span><span class="cfett"> Daten aus einer Datei auslesen</span>  <a href="#t2t34"><img src="common/down.gif" width="15" height="15" border="0" alt="Zur nächsten Überschrift"></a><a href="#t2t32"><img src="common/top.gif" width="15" height="15" border="0" alt="Zur vorigen Überschrift"></a></h3>
<p>Wir beginnen damit, Daten aus einer Datei auszulesen. Dazu müssen wir lesend auf diese Datei zugreifen. Bei der Testdatei, die wir in diesem Beispiel verwenden werden, handelt es sich um ein Wörterbuch, das in jeder Zeile ein englisches Wort und, durch ein Leerzeichen davon getrennt, seine deutsche Übersetzung enthält. Die Datei soll <span class="ckursiv">woerterbuch.txt</span> heißen:</p>
<div class="listing"><pre class="prettyprint">Spain Spanien 
Germany Deutschland 
Sweden Schweden 
France Frankreich 
Italy Italien</pre></div>
<p>Im Programm würden wir die Daten, die in dieser Datei stehen, gerne so aufbereiten, dass wir später in einem Dictionary bequem auf sie zugreifen können. Als kleine Zugabe werden wir das Programm noch dahingehend erweitern, dass der Benutzer das Programm nach der Übersetzung eines englischen Begriffes fragen kann.</p>
<p>Zunächst einmal muss die Datei zum Lesen geöffnet werden. Dazu wird die Built-in Function <span class="clisting">open</span> verwendet. Diese gibt das in Abschnitt <a href="#Rxx_ref172312918">9.1</a> bereits angesprochene <span class="ckursiv">Dateiobjekt</span> zurück:</p>
<div class="listing"><pre class="prettyprint">fobj = open("woerterbuch.txt", "r")</pre></div>
<p>Nachdem <span class="clisting">open</span> aufgerufen wurde, können mit dem Dateiobjekt Daten aus der Datei gelesen werden. Nachdem das Lesen der Datei beendet worden ist, muss sie explizit durch Aufrufen der Methode <span class="clisting">close</span> geschlossen werden:</p>
<div class="listing"><pre class="prettyprint">fobj.close()</pre></div>
<p>Als erster Parameter von <span class="clisting">open</span> wird ein String übergeben, der den Dateinamen enthält. Beachten Sie, dass hier sowohl relative als auch absolute Dateinamen erlaubt sind. In diesem Fall handelt es sich um einen relativen Dateinamen, die Datei muss sich also im selben Verzeichnis wie das Programm befinden. Der zweite Parameter ist ebenfalls ein String und spezifiziert den Modus, in dem die Datei geöffnet werden soll, wobei <span class="clisting">"r"</span> für »read« steht und bedeutet, dass die Datei zum Lesen geöffnet wird. Das von der Funktion zurückgegebene Dateiobjekt wird mit der Referenz <span class="clisting">fobj</span> verknüpft. Sollte die Datei nicht vorhanden sein, wird ein <span class="clisting">IOError</span> erzeugt:</p>
<div class="listing"><pre class="prettyprint">Traceback (most recent call last): 
  File "woerterbuch.py", line 1, in &lt;module&gt; 
    fobj = open("woerterbuch.txt", "r") 
IOError: [Errno 2] No such file or directory: 'woerterbuch.txt'</pre></div>
<p>Wenn ein Dateiobjekt nicht mehr benötigt wird, muss es durch Aufruf der Methode <span class="clisting">close</span> geschlossen werden. Nach Aufruf dieser Methode können keine weiteren Daten mehr gelesen werden.</p>
<p>Im nächsten Schritt möchten wir die Datei zeilenweise auslesen. Dies ist relativ einfach, da das Dateiobjekt zeilenweise iterierbar ist. Wir können also die altbekannte <span class="clisting">for</span>-Schleife verwenden:</p>
<div class="listing"><pre class="prettyprint">fobj = open("woerterbuch.txt", "r")<span class="cfett"> 
for</span> line<span class="cfett"> in</span> fobj: 
   <span class="cfett"> print</span> line 
fobj.close()</pre></div>
<p>In der <span class="clisting">for</span>-Schleife iterieren wir zeilenweise über das Dateiobjekt, wobei <span class="clisting">line</span> jeweils den Inhalt der aktuellen Zeile referenziert. Momentan wird jede Zeile im Schleifenkörper lediglich ausgegeben. Wir möchten jedoch im Programm ein Dictionary aufbauen, das nach dem Einlesen der Datei die englischen Begriffe als Schlüssel und den jeweiligen deutschen Begriff als Wert enthält.</p>
<p>Dazu legen wir zunächst ein leeres Dictionary an:</p>
<div class="listing"><pre class="prettyprint">woerter = {}</pre></div>
<p>Dann wird die Datei <span class="ckursiv">woerterbuch.txt</span> zum Lesen geöffnet und in einer Schleife über alle Zeilen der Datei iteriert:</p>
<div class="listing"><pre class="prettyprint">fobj = open("woerterbuch.txt", "r")<span class="cfett"> 
for</span> line<span class="cfett"> in</span> fobj: 
    zuordnung = line.split(" ") 
    woerter[zuordnung[0]] = zuordnung[1] 
fobj.close()</pre></div>
<p>Im Schleifenkörper verwenden wir nun die Methode <span class="clisting">split</span> eines Strings, um die aktuell eingelesene Zeile in zwei Teile einer Liste aufzubrechen: in den Teil links vom Leerzeichen, also das englische Wort, und in den Teil rechts vom Leerzeichen, also das deutsche Wort. In der nächsten Zeile des Schleifenkörpers wird dann ein neuer Eintrag im Dictionary angelegt, mit dem Schlüssel <span class="clisting">zuordnung[0]</span> (dem englischen Wort) und dem Wert <span class="clisting">zuordnung[1]</span> (dem deutschen Wort).</p>
<p>Verändern Sie einmal den obigen Code dahingehend, dass nach dem Schließen des Dateiobjekts das erzeugte Dictionary mittels <span class="clisting">print</span> ausgegeben wird. Diese Ausgabe wird etwa so aussehen:</p>
<div class="listing"><pre class="prettyprint">{'Italy': 'Italien', 'Sweden': 'Schweden\n', 'Germany': 'Deutschland\n', 'Spain': 'Spanien\n', 'France': 'Frankreich\n'}</pre></div>
<p>Sie sehen, dass hinter jedem Wert ein <span class="clisting">\n</span>, also die Escape-Sequenz für einen Zeilenumbruch, steht. Das liegt daran, dass ein Zeilenumbruch in Python als Buchstabe und damit als Teil des Dateiinhaltes angesehen wird. Deswegen wird jede Zeile einer Datei vollständig, also inklusive eines möglichen Zeilenumbruchs am Ende, eingelesen. Der Zeilenumbruch wird natürlich nur eingelesen, wenn er wirklich vorhanden ist. Das bedeutet, dass die letzte Zeile (in diesem Fall <span class="clisting">Italy Italien</span>) ohne Zeilenumbruch am Ende eingelesen wird.</p>
<p>Den Zeilenumbruch möchten wir im endgültigen Dictionary nicht wiederfinden. Aus diesem Grund rufen wir in jedem Schleifendurchlauf die <span class="clisting">strip</span>-Methode des Strings <span class="clisting">line</span> auf. Diese entfernt alle Whitespace-Zeichen, unter anderem also einen Zeilenumbruch, am Anfang und Ende des Strings.</p>
<div class="listing"><pre class="prettyprint">woerter = {} 
fobj = open("woerterbuch.txt", "r")<span class="cfett"> 
for</span> line<span class="cfett"> in</span> fobj: 
    line = line.strip() 
    zuordnung = line.split(" ") 
    woerter[zuordnung[0]] = zuordnung[1] 
fobj.close()</pre></div>
<p>Damit ist der Inhalt der Datei vollständig in ein Dictionary überführt worden. Als kleine Zugabe haben wir uns vorgenommen, es dem Benutzer zu ermöglichen, Anfragen an das Programm zu senden. Im Ablaufprotokoll soll das folgendermaßen aussehen:</p>
<div class="listing"><pre class="prettyprint">Geben Sie ein Wort ein: Germany 
Das deutsche Wort lautet: Deutschland 
Geben Sie ein Wort ein: Italy 
Das deutsche Wort lautet: Italien 
Geben Sie ein Wort ein: Greece 
Das Wort ist unbekannt</pre></div>
<p>Im Programm lesen wir in einer Endlosschleife Anfragen vom Benutzer ein. Mit dem <span class="clisting">in</span>-Operator prüfen wir, ob das eingelesene Wort als Schlüssel im Dictionary vorhanden ist. Ist das der Fall, so wird die entsprechende deutsche Übersetzung ausgegeben. Sollte das eingegebene Wort nicht vorhanden sein, so wird eine Fehlermeldung ausgegeben.</p>
<div class="listing"><pre class="prettyprint">woerter = {}<br>
fobj = open("woerterbuch.txt", "r")<span class="cfett"> 
for</span> line<span class="cfett"> in</span> fobj: 
    line = line.strip() 
    zuordnung = line.split(" ") 
    woerter[zuordnung[0]] = zuordnung[1] 
fobj.close()<br>
<span class="cfett">while</span> True: 
    wort = raw_input("Geben Sie ein Wort ein: ") 
   <span class="cfett"> if</span> wort<span class="cfett"> in</span> woerter: 
       <span class="cfett"> print</span> "Das deutsche Wort lautet:", woerter[wort] 
   <span class="cfett"> else</span>: 
       <span class="cfett"> print</span> "Das Wort ist unbekannt"</pre></div>
<p>Das hier vorgestellte Beispielprogramm ist weit davon entfernt, perfekt zu sein, jedoch zeigt es sehr schön, wie Dateiobjekte und auch Dictionarys sinnvoll eingesetzt werden können. Fühlen Sie sich dazu ermutigt, das Programm zu erweitern. Sie könnten es dem Benutzer beispielsweise ermöglichen, das Programm zu beenden, Übersetzungen in beide Richtungen anbieten oder das Verwenden mehrerer Quelldateien erlauben.</p><a id="mj5f2eea63ac9295fe7d517241f3bae93b" name="mj5f2eea63ac9295fe7d517241f3bae93b"></a><a name="t33"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang"></a></div><a name="t2t34"></a><h3 class="t3"><span class="cfett">9.3.3</span><span class="cfett"> Daten in eine Datei schreiben</span>  <a href="#t2t35"><img src="common/down.gif" width="15" height="15" border="0" alt="Zur nächsten Überschrift"></a><a href="#t2t33"><img src="common/top.gif" width="15" height="15" border="0" alt="Zur vorigen Überschrift"></a></h3>
<p>Im letzten Kapitel haben wir uns dem Lesen von Dateien gewidmet. Dass es auch andersherum geht, soll in diesem Kapitel das Thema sein. Um eine Datei zum Schreiben zu öffnen, wird ebenfalls die Built-in Function <span class="clisting">open</span> verwendet. Sie erinnern sich, dass diese Funktion einen Modus als zweiten Parameter erwartet, der im letzten Abschnitt <span class="clisting">"r"</span> für »read« sein musste. Analog dazu muss <span class="clisting">"w"</span> (für »write«) angegeben werden, wenn die Datei zum Schreiben geöffnet werden soll. Sollte die gewünschte Datei bereits vorhanden sein, so wird sie geleert. Nicht vorhandene Dateien werden erstellt.</p>
<div class="listing"><pre class="prettyprint">fobj = open("ausgabe.txt", "w")</pre></div>
<p>Nachdem alle Daten in die Datei geschrieben wurden, muss das Dateiobjekt durch Aufruf der Methode <span class="clisting">close</span> geschlossen werden.</p>
<div class="listing"><pre class="prettyprint">fobj.close()</pre></div>
<p>Das Schreiben eines Strings in die geöffnete Datei erfolgt durch Aufruf der Methode <span class="clisting">write</span> des Dateiobjekts. Das nachfolgende Beispielprogramm versteht sich als Gegenstück zu dem im vorherigen Kapitel. Wir gehen davon aus, dass <span class="clisting">woerter</span> ein Dictionary referenziert, das englische Begriffe als Schlüssel und die deutschen Übersetzungen als Werte enthält. Es handelt sich also genau um das Dictionary, das von dem Beispielprogramm des letzten Kapitels erzeugt wurde.</p>
<div class="listing"><pre class="prettyprint">fobj = open("ausgabe.txt", "w")<span class="cfett"> 
for</span> engl<span class="cfett"> in</span> woerter: 
    fobj.write(engl + " " + woerter[engl] + "\n") 
fobj.close()</pre></div>
<p>Zunächst wird eine Datei namens <span class="ckursiv">ausgabe.txt</span> zum Schreiben geöffnet. Danach werden alle Schlüssel des Dictionarys <span class="clisting">woerter</span> durchlaufen. In jedem Schleifendurchlauf wird mittels <span class="clisting">fobj.write</span> ein entsprechend formatierter String in die Datei geschrieben. Beachten Sie zum einen, dass beim Schreiben einer Datei explizit durch Ausgabe eines <span class="clisting">\n</span> in eine neue Zeile gesprungen werden muss, und zum anderen, dass die Initialisierung des Dictionarys <span class="clisting">woerter</span> im Codebeispiel fehlt.</p>
<p>Die von diesem Beispiel geschriebene Datei kann problemlos durch das Beispielprogramm aus dem letzten Abschnitt wieder eingelesen werden.</p>
<p>In Abschnitt <a href="#Rxx_ref172397145">9.1</a>, »<a href="#Rxx_ref172397160">Bildschirmausgaben</a>«, wurde gesagt, dass sich Strings auch mittels <span class="clisting">print</span> in eine Datei schreiben lassen. Das ist korrekt. Das obige Beispiel lässt sich durch diese Notation folgendermaßen formulieren:</p>
<div class="listing"><pre class="prettyprint">fobj = open("ausgabe.txt", "w")<span class="cfett"> 
for</span> engl<span class="cfett"> in</span> woerter: 
   <span class="cfett"> print</span> &gt;&gt; fobj, engl, woerter[engl] 
fobj.close()</pre></div>
<p>Beachten Sie, dass nach einer Ausgabe mit <span class="clisting">print</span> automatisch in eine neue Zeile gesprungen sowie für jedes Komma ein Leerzeichen in der Ausgabe ergänzt wird.</p><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellenkopf"><span class="cfett">Hinweis</span>
</td>
</tr>
<tr>
<td class="tabellentext" rowspan="2">
Um Sonderzeichen innerhalb einer Textdatei verwenden zu können, wird die Datei, wie Sie es bereits von Sonderzeichen in Strings her kennen, in einer bestimmten Kodierung gespeichert.</p>
Um solche kodiert gespeicherten Dateien komfortabel lesen oder schreiben zu können, verwendet man das Modul <span class="clisting">codecs</span> der Standardbibliothek, das in Abschnitt <a href="./python_kapitel_27_001.htm#Rxx_ref180682339">27.1</a> beschrieben wird.</p>
</td>
</tr>
</table><br><a id="mjca7424dda57d0e881fcbddf831a4a523" name="mjca7424dda57d0e881fcbddf831a4a523"></a><a name="t34"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang"></a></div><a name="t2t35"></a><h3 class="t3"><span class="cfett">9.3.4</span><span class="cfett"> <a id="Rxx_ref173232087" name="Rxx_ref173232087"></a><a id="Rxx_ref173232059" name="Rxx_ref173232059"></a>Verwendung des Dateiobjekts</span>  <img src="common/15x15leer.gif" width="15" height="15" border="0" alt="top"><a href="#t2t34"><img src="common/top.gif" width="15" height="15" border="0" alt="Zur vorigen Überschrift"></a></h3>
<p>Das Dateiobjekt besitzt, wie beispielsweise die komplexeren Datentypen auch, Methoden und Attribute. Einige von ihnen haben wir in den beiden vorherigen Unterabschnitten bereits besprochen. Wir möchten auf das Dateiobjekt bezogene Attribute, Methoden und Built-in Functions noch einmal tabellarisch erklären. Die Bedeutung ist in der Tabelle jeweils zusammenfassend dargestellt. Einige der Methoden werden im Anschluss an die Tabelle ausführlich erklärt.</p><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<caption class="tabunter"><strong>Tabelle 9.1    </strong>Built-in Functions für Dateiobjekte
</caption>
<tr>
<td class="tabellenkopf"><span class="cfett">Built-in Function</span>
</td>
<td class="tabellenkopf"><span class="cfett">Beschreibung</span>
</td>
</tr>
<tr>
<td class="tabellentext">
<p><span class="clisting">open(filename[, mode[, bufsize]])</span></p>
</td>
<td class="tabellentext">
<p>Öffnet eine Datei im gewünschten Modus und gibt das Dateiobjekt zurück. Beachten Sie, dass es sich um eine Built-in Function handelt und nicht um eine Methode des Dateiobjekts <span class="clisting">f</span>.</p>
<p>Eine ausführliche Beschreibung von <span class="clisting">open</span> finden Sie am Ende des Kapitels.</p>
</td>
</tr>
</table><br><p>In der nun folgenden Tabelle sei <span class="clisting">f</span> stets ein mit <span class="clisting">open</span> erfolgreich erzeugtes Dateiobjekt. [In diesem Zusammenhang bedeutet »ungefähr«, dass die Anzahl der zu lesenden Bytes möglicherweise zu einer internen Puffergröße aufgerundet wird.
] </p><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<caption class="tabunter"><strong>Tabelle 9.2    </strong>Methoden eines Dateiobjekts
</caption>
<tr>
<td class="tabellenkopf"><span class="cfett">Methode</span>
</td>
<td class="tabellenkopf"><span class="cfett">Beschreibung</span>
</td>
</tr>
<tr>
<td class="tabellentext">
<p><span class="clisting">f.close()</span></p>
</td>
<td class="tabellentext">
<p>Schließt ein bestehendes Dateiobjekt. Beachten Sie, dass danach keine Lese- oder Schreiboperationen mehr durchgeführt werden dürfen.</p>
</td>
</tr>
<tr>
<td class="tabellentext">
<p><span class="clisting">f.flush()</span></p>
</td>
<td class="tabellentext">
<p>Verfügt, dass anstehende Schreiboperationen sofort ausgeführt werden.</p>
</td>
</tr>
<tr>
<td class="tabellentext">
<p><span class="clisting">f.fileno()</span></p>
</td>
<td class="tabellentext">
<p>Gibt den Deskriptor der geöffneten Datei als ganze Zahl zurück.</p>
</td>
</tr>
<tr>
<td class="tabellentext">
<p><span class="clisting">f.isatty()</span></p>
</td>
<td class="tabellentext">
<p><span class="clisting">True</span>, wenn das Dateiobjekt auf einem Datenstrom geöffnet wurde, der nicht an beliebiger Stelle geschrieben oder gelesen werden kann.</p>
</td>
</tr>
<tr>
<td class="tabellentext">
<p><span class="clisting">f.next()</span></p>
</td>
<td class="tabellentext">
<p>Liest die nächste Zeile der Datei ein und gibt diese als String zurück.</p>
</td>
</tr>
<tr>
<td class="tabellentext">
<p><span class="clisting">f.read([size])</span></p>
</td>
<td class="tabellentext">
<p>Liest <span class="clisting">size</span> Bytes der Datei ein, oder weniger, wenn vorher das Ende der Datei erreicht wurde. Sollte <span class="clisting">size</span> nicht angegeben sein, so wird die Datei vollständig eingelesen.</p>
<p>Die Daten werden als String zurückgegeben.</p>
</td>
</tr>
<tr>
<td class="tabellentext">
<p><span class="clisting">f.readline([size])</span></p>
</td>
<td class="tabellentext">
<p>Liest eine Zeile der Datei ein. Durch Angabe von <span class="clisting">size</span> lässt sich die Anzahl der zu lesenden Bytes begrenzen.<a href="#Rxx37796"><sup>1  </sup></a></p>
</td>
</tr>
<tr>
<td class="tabellentext">
<p><span class="clisting">f.readlines([sizehint])</span></p>
</td>
<td class="tabellentext">
<p>Liest alle Zeilen und gibt sie in Form einer Liste von Strings zurück. Sollte <span class="clisting">sizehint</span> angegeben sein, so wird nur gelesen, bis ungefähr <span class="clisting">sizehint</span> Bytes gelesen wurden.</p>
</td>
</tr>
<tr>
<td class="tabellentext">
<p><span class="clisting">f.seek(offset[, whence])</span></p>
</td>
<td class="tabellentext">
<p>Setzt die aktuelle Schreib-/Leseposition in der Datei auf <span class="clisting">offset</span>.</p>
<p>Eine ausführliche Beschreibung von <span class="clisting">f.seek</span> finden Sie am Ende des Kapitels.</p>
</td>
</tr>
<tr>
<td class="tabellentext">
<p><span class="clisting">f.tell()</span></p>
</td>
<td class="tabellentext">
<p>Liefert die aktuelle Schreib-/Leseposition in der Datei.</p>
</td>
</tr>
<tr>
<td class="tabellentext">
<p><span class="clisting">f.truncate([size])</span></p>
</td>
<td class="tabellentext">
<p>Löscht in der Datei alle Daten, die hinter der aktuellen Schreib-/Leseposition bzw. &#8211; sofern angegeben &#8211; hinter <span class="clisting">size</span> stehen.</p>
</td>
</tr>
<tr>
<td class="tabellentext">
<p><span class="clisting">f.write(str)</span></p>
</td>
<td class="tabellentext">
<p>Schreibt den String <span class="clisting">str</span> in die Datei.</p>
</td>
</tr>
<tr>
<td class="tabellentext">
<p><span class="clisting">f.writelines(sequence)</span></p>
</td>
<td class="tabellentext">
<p>Schreibt mehrere Zeilen in die Datei. <span class="clisting">sequence</span> muss eine Liste von Strings sein.</p>
</td>
</tr>
</table><br><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<caption class="tabunter"><strong>Tabelle 9.3    </strong>Attribute eines Dateiobjekts
</caption>
<tr>
<td class="tabellenkopf"><span class="cfett">Attribut</span>
</td>
<td class="tabellenkopf"><span class="cfett">Beschreibung</span>
</td>
</tr>
<tr>
<td class="tabellentext">
<p><span class="clisting">f.closed</span></p>
</td>
<td class="tabellentext">
<p><span class="clisting">True</span>, wenn die Datei geschlossen ist, andernfalls <span class="clisting">False</span>.</p>
</td>
</tr>
<tr>
<td class="tabellentext">
<p><span class="clisting">f.encoding</span></p>
</td>
<td class="tabellentext">
<p>Enthält das Encoding, das genutzt wird, um eine Datei im Textmodus zu schreiben. Ein Wert von <span class="clisting">None</span> bedeutet, dass der Systemdefault verwendet wird.</p>
</td>
</tr>
<tr>
<td class="tabellentext">
<p><span class="clisting">f.mode</span></p>
</td>
<td class="tabellentext">
<p>Enthält den Modus, der beim Öffnen der Datei angegeben wurde.</p>
</td>
</tr>
<tr>
<td class="tabellentext">
<p><span class="clisting">f.name</span></p>
</td>
<td class="tabellentext">
<p>Enthält den Namen der geöffneten Datei.</p>
</td>
</tr>
<tr>
<td class="tabellentext">
<p><span class="clisting">f.newlines</span></p>
</td>
<td class="tabellentext">
<p>Dieses Attribut enthält alle Typen von Newline-Zeichen, die bisher vorgekommen sind, da diese von System zu System sehr verschieden sind.</p>
</td>
</tr>
</table><br><p>Viele der oben beschriebenen Methoden sind durch vorangegangene Beispiele oder den erklärenden Text ausreichend beschrieben. Wir möchten uns trotzdem noch einmal eingehend mit der Built-in Function <span class="clisting">open</span> sowie mit der Methode <span class="clisting">seek</span> befassen.</p>
<h5 class="t5"><a id="Rxx_ref180777473" name="Rxx_ref180777473"></a><span class="cfett">open(filename[, mode[, bufsize]])</span></h5>
<p>Die Built-in Function <span class="clisting">open</span> öffnet eine Datei und gibt das erzeugte Dateiobjekt zurück. Mithilfe dieses Dateiobjekts können nachher die gewünschten Operationen an der Datei durchgeführt werden.</p>
<p>Die Funktion <span class="clisting">open</span> erwartet drei Parameter. Zunächst einmal muss der Dateiname bzw. der Pfad zur zu öffnenden Datei angegeben werden (<span class="ckursiv">filename</span>). Dann wird der Modus (<span class="ckursiv">mode</span>) spezifiziert, in dem die Datei zu öffnen ist. Dieser Parameter muss ein String sein, wobei alle gültigen Werte und ihre Bedeutung in der folgenden Tabelle aufgelistet sind:</p><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<caption class="tabunter"><strong>Tabelle 9.4    </strong>Dateimodi
</caption>
<tr>
<td class="tabellenkopf"><span class="cfett">Modus</span>
</td>
<td class="tabellenkopf"><span class="cfett">Beschreibung</span>
</td>
</tr>
<tr>
<td class="tabellentext">
<p><span class="clisting">"r"</span></p>
</td>
<td class="tabellentext">
<p>Die Datei wird ausschließlich zum Lesen geöffnet (»r« für »read«).</p>
</td>
</tr>
<tr>
<td class="tabellentext">
<p><span class="clisting">"w"</span></p>
</td>
<td class="tabellentext">
<p>Die Datei wird ausschließlich zum Schreiben geöffnet. Eine eventuell bestehende Datei gleichen Namens wird überschrieben (»w« steht für »write«).</p>
</td>
</tr>
<tr>
<td class="tabellentext">
<p><span class="clisting">"a"</span></p>
</td>
<td class="tabellentext">
<p>Die Datei wird ausschließlich zum Schreiben geöffnet. Eine eventuell bestehende Datei gleichen Namens wird nicht überschrieben, sondern erweitert (»a« steht für »append«).</p>
</td>
</tr>
<tr>
<td class="tabellentext">
<p><span class="clisting">"r+"</span>, <span class="clisting">"w+"</span>, <span class="clisting">"a+"</span></p>
</td>
<td class="tabellentext">
<p>Die Datei wird zum Lesen und Schreiben geöffnet. Beachten Sie, dass <span class="clisting">"w+"</span> eine eventuell bestehende Datei gleichen Namens leert.</p>
</td>
</tr>
<tr>
<td class="tabellentext">
<p><span class="clisting">"rb"</span>, <span class="clisting">"wb"</span>, <span class="clisting">"ab"</span>, <span class="clisting">"r+b"</span>, <span class="clisting">"w+b"</span>, <span class="clisting">"a+b"</span></p>
</td>
<td class="tabellentext">
<p>Die Datei wird im Binärmodus geöffnet. Beachten Sie, dass Strings in Python auch binäre Daten erfassen können (»b« steht für »binary«).</p>
</td>
</tr>
</table><br><p>Der Parameter <span class="ckursiv">mode</span> ist optional und wird als <span class="clisting">"r"</span> angenommen, wenn er weggelassen wird.</p>
<p>Als letzter, ebenfalls optionaler Parameter kann der Puffermodus bzw. eine Puffergröße übergeben werden. Dabei bedeutet ein Wert von <span class="clisting">0</span>, dass keine Pufferung verwendet werden soll, und <span class="clisting">1</span> heißt, dass zeilenweise gepuffert werden soll. Jede ganze Zahl größer als <span class="clisting">1</span> wird als Richtwert für die gewünschte Puffergröße betrachtet. Eine negative Zahl veranlasst dazu, den Systemdefault zu verwenden.</p>
<h5 class="t5"><span class="cfett">f.seek(offset[, whence])</span></h5>
<p>Setzt die Schreib-/Leseposition innerhalb der Datei. Beachten Sie, dass diese Methode je nach Modus, in dem die Datei geöffnet wurde, keine Auswirkung hat (Modus <span class="clisting">"a"</span>) oder dass die Schreibposition vor der nächsten Ausgabe zurückgesetzt werden kann (Modus <span class="clisting">"a+"</span>). Sollte die Datei im Binärmodus geöffnet worden sein, wird der Parameter <span class="ckursiv">offset</span> in Bytes vom Dateianfang aus gezählt. Diese Interpretation von <span class="ckursiv">offset</span> lässt sich durch den optionalen Parameter <span class="ckursiv">whence</span> beeinflussen:</p><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<caption class="tabunter"><strong>Tabelle 9.5    </strong>Der Parameter whence
</caption>
<tr>
<td class="tabellenkopf"><span class="cfett">Wert von whence</span>
</td>
<td class="tabellenkopf"><span class="cfett">Interpretation von offset</span>
</td>
</tr>
<tr>
<td class="tabellentext">
<p><span class="clisting">0</span></p>
</td>
<td class="tabellentext">
<p>Anzahl Bytes relativ zum Dateianfang</p>
</td>
</tr>
<tr>
<td class="tabellentext">
<p><span class="clisting">1</span></p>
</td>
<td class="tabellentext">
<p>Anzahl Bytes relativ zur aktuellen Schreib-/Leseposition</p>
</td>
</tr>
<tr>
<td class="tabellentext">
<p><span class="clisting">2</span></p>
</td>
<td class="tabellentext">
<p>Anzahl Bytes relativ zum Dateiende</p>
</td>
</tr>
</table><br><p>Beachten Sie, dass Sie <span class="clisting">seek</span> nicht so unbeschwert verwenden können, wenn die Datei im Textmodus geöffnet wurde. Hier sollten als <span class="clisting">offset</span> nur Rückgabewerte der Methode <span class="clisting">tell</span> verwendet werden. Abweichende Werte können zu undefiniertem Verhalten führen.</p><br><hr><a name="kommentar"></a><h3>Ihr Kommentar</h3>
                       Wie hat Ihnen das &lt;openbook&gt; gefallen? Wir freuen uns immer über Ihre freundlichen und kritischen Rückmeldungen.
                       <form action="http://www.galileo-press.de/feedback/openbook" method="post" style="text-align: center; margin-top: 10px;"><input type="hidden" name="openbookurl" value="http://www.galileocomputing.de/openbook/python/python_kapitel_09_003.htm"><input type="hidden" name="buchtitel" value="Python"><input type="hidden" name="Kapitel" value="9.3 Dateien"><table border="0">
<tr>
<td><label for="name">Name</label><br></td>
<td><input type="text" name="name" id="name" size="40"><br></td>
</tr>
<tr>
<td><label for="email">E-Mail</label><br></td>
<td><input type="text" name="email" id="email" size="40"><br></td>
</tr>
<tr>
<td valign="top"><label for="comment">Ihr Kommentar</label><br></td>
<td><textarea name="comment" id="comment" rows="10" cols="40"></textarea><br></td>
</tr>
<tr>
<td>
</td>
<td><input type="submit" value="Kommentar absenden"></td>
</tr>
</table>
</form>
</div></td>
</tr>
</table></td>
</tr>
<tr>
<td width="100%" class="start" colspan="1" height="22" align="center"><table width="100%" border="0" cellspacing="0" cellpadding="0">
<tr>
<td width="25%"><a href="python_kapitel_09_002.htm" class="navnav"> &lt;&lt;   zurück</a></td>
<td width="49%"><div align="center"><a class="navnav" href="#">&lt;top&gt;</a></div></td>
<td align="right" width="25%"><div align="right"><a href="python_kapitel_10_001.htm" class="navnav">vor   &gt;&gt; </a></div></td>
</tr>
</table></td>
</tr>
</table>
</div></td>
<td width="10" valign="top">  </td>
<td width="160" valign="top">
    <table border="0" cellpadding="0" cellspacing="0" width="160">
        <tr>
            <td>
                <table border="0" cellpadding="0" cellspacing="0" width="100%">
                    <tr>
                        <td class="start" height="20" colspan="2">
                            &nbsp;<a href="http://www.galileocomputing.de/katalog/buecher/?GPP=oppy" class="autor">
                            <strong>Zum Katalog</strong></a>
                        </td>
                    </tr>
                    <tr>
                        <td valign="top" class="tbl4" width="2">
                            <img src="common/leer.gif" border="0" height="1" width="1"></td>
                        <td valign="top">
                            <table cellspacing="3">
                                <tr>
                                    <td><a href="http://www.galileocomputing.de/1626?GPP=oppy">
                                        <img src="common/1110_90px.gif" width="105" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: Python" title="Zum Katalog: Python">
                                        <br /><br /><br /><br /><br /><br /><br /><strong>Python</strong><br /><img src="common/pfeil_rechts5.gif" border="0" alt="">bestellen</a>
                                    </td>
                                </tr>
                            </table>
                        </td>
                    </tr>
                </table>
            </td>
        </tr>
        <tr>
            <td><img src="common/leer.gif" height="2" width="1" border="0" /></img></td>
        </tr>
        <tr>
            <td>
                <table border="0" cellpadding="0" cellspacing="0" width="100%">
                    <tr>
                        <td class="start" height="20" colspan="2"><span class="autor"><strong>&nbsp;Ihre Meinung?</strong></a></td>
                    </tr>
                    <tr>
                        <td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td>
                        <td valign="top">
                            <table cellspacing="3">
                                <tr>
                                    <td>Wie hat Ihnen das &lt;openbook&gt; gefallen?<br /><a href="#kommentar"><img src="common/pfeil_rechts5.gif" border="0" alt="">Ihre Meinung</a>
                                    <br /><br /></td>
                                </tr>
                            </table>
                        </td>
                    </tr>
                </table>
            </td>
        </tr>
        <tr>
            <td><img src="common/leer.gif" height="2" width="1" border="0" /></img></td>
        </tr>
        <tr>
            <td>
                <table border="0" cellpadding="0" cellspacing="0" width="100%">
                    <tr>
                        <td class="start" height="20" colspan="2">&nbsp;<a href="http://www.galileocomputing.de/katalog/buecher/?GPP=oppy" class="autor"><strong>Buchtipps</strong></a></td>
                    </tr>
                    <tr>
                        <td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
                        <a href="http://www.galileocomputing.de/1579?GPP=oppy">
                        <img src="common/9783836210904_s.gif" width="119" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: Linux" title="Zum Katalog: Linux"><br /><br /><br /><br /><br /><br /><br />&nbsp;Linux</a><br /><br /></td>
                    </tr>
                    <tr>
                        <td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
                        <a href="http://www.galileocomputing.de/1337?GPP=oppy">
                        <img src="common/9783898428484_s.gif" width="105" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: Ubuntu GNU/Linux" title="Zum Katalog: Ubuntu GNU/Linux"><br /><br /><br /><br /><br /><br /><br>&nbsp;Ubuntu GNU/Linux</a><br /><br /></td>
                    </tr>
                    <tr>
                        <td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
                        <a href="http://www.galileocomputing.de/1451?GPP=oppy">
                        <img src="common/9783836210874_s.gif" width="112" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: Praxisbuch Web 2.0" title="Zum Katalog: Praxisbuch Web 2.0"><br /><br /><br /><br /><br /><br /><br />&nbsp;Praxisbuch Web 2.0</a><br /><br /></td>
                    </tr>
                    <tr>
                        <td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
                        <a href="http://www.galileocomputing.de/1142?GPP=oppy">
                        <img src="common/9783898427388_s.gif" width="105" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: UML 2.0" title="Zum Katalog: UML 2.0"><br /><br /><br /><br /><br /><br /><br />&nbsp;UML 2.0</a><br /><br /></td>
                    </tr>
                    <tr>
                        <td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
                        <a href="http://www.galileocomputing.de/966?GPP=oppy">
                        <img src="common/9783898426244_s.gif" width="94" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: Praxisbuch Objektorientierung" title="Zum Katalog: Praxisbuch Objektorientierung"><br /><br /><br /><br /><br /><br /><br />&nbsp;Praxisbuch Objektorientierung</a><br /><br /></td>
                    </tr>
                    <tr>
                        <td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
                        <a href="http://www.galileocomputing.de/1477?GPP=oppy">
                        <img src="common/1039_90px.gif" width="105" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: Einstieg in SQL" title="Zum Katalog: Einstieg in SQL"><br /><br /><br /><br /><br /><br /><br />&nbsp;Einstieg in SQL</a><br /><br /></td>
                    </tr>
                    <tr>
                        <td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
                        <a href="http://www.galileocomputing.de/1234?GPP=oppy">
                        <img src="common/1015_90px.gif" width="105" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: IT-Handbuch für Fachinformatiker" title="Zum Katalog: IT-Handbuch für Fachinformatiker"><br /><br /><br /><br /><br /><br /><br>&nbsp;IT-Handbuch für Fachinformatiker</a><br /><br /></td>
                    </tr>
                </table></td>
        </tr>
        <tr>
            <td><img src="common/leer.gif" height="2" width="1" border="0" /></img></td>
        </tr>
        <tr>
            <td>
                <table border="0" cellpadding="0" cellspacing="0" width="100%">
                    <tr>
                        <td class="start" height="20" colspan="2"><span class="autor"><strong>&nbsp;Shopping</strong></span></td>
                    </tr>
                    <tr>
                        <td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td>
                        <td valign="top">
                            <table cellspacing="3">
                                <tr>
                                    <td><b>Versandkostenfrei</b> bestellen in Deutschland und &Ouml;sterreich<br /><a href="http://www.galileocomputing.de/hilfe/Shop/?GPP=oppy"><img src="common/pfeil_rechts5.gif" border="0" alt="Info">Info</a><br /><br /></td>
                                </tr>
                            </table>
                        </td>
                    </tr>
                </table>
            </td>
        </tr>
    </table>
</td>
</tr>
</table><br><br><hr width="70%" align="center"><br><div align="center">
<p class="standard"><b>Copyright © Galileo Press 2008</b><br>Für Ihren privaten Gebrauch dürfen Sie die Online-Version natürlich ausdrucken. Ansonsten unterliegt das &lt;openbook&gt; denselben Bestimmungen, wie die gebundene Ausgabe: Das Werk einschließlich aller seiner Teile ist urheberrechtlich geschützt. Alle Rechte vorbehalten einschließlich der Vervielfältigung, Übersetzung, Mikroverfilmung sowie Einspeicherung und Verarbeitung in elektronischen Systemen.</p><br><a href="http://www.galileocomputing.de/">[Galileo Computing]</a><br><br>Galileo Press, Rheinwerkallee 4, 53227 Bonn, Tel.: 0228.42150.0, Fax 0228.42150.77, <a href="mailto:info@galileo-press.de">info@galileo-press.de</a></div><br><br></body>

</html>
